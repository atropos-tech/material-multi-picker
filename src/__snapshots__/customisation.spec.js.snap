// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MultiPicker component renders custom chip avatars 1`] = `
<WithStyles(Avatar)
  childrenClassName="MuiChip-avatarChildren"
  className="MuiChip-avatar"
  src="./missing-image"
>
  <Avatar
    childrenClassName="MuiChip-avatarChildren"
    className="MuiChip-avatar"
    classes={
      Object {
        "colorDefault": "MuiAvatar-colorDefault",
        "img": "MuiAvatar-img",
        "root": "MuiAvatar-root",
      }
    }
    component="div"
    src="./missing-image"
  >
    <div
      className="MuiAvatar-root MuiChip-avatar"
    >
      <img
        className="MuiAvatar-img"
        src="./missing-image"
      />
    </div>
  </Avatar>
</WithStyles(Avatar)>
`;

exports[`MultiPicker component renders custom chip labels 1`] = `
<WithStyles(Chip)
  className="MultiPicker-pickerChip"
  label="some label"
  onDelete={[Function]}
  tabIndex={-1}
  variant="default"
>
  <Chip
    className="MultiPicker-pickerChip"
    classes={
      Object {
        "avatar": "MuiChip-avatar",
        "avatarChildren": "MuiChip-avatarChildren",
        "avatarColorPrimary": "MuiChip-avatarColorPrimary",
        "avatarColorSecondary": "MuiChip-avatarColorSecondary",
        "clickable": "MuiChip-clickable",
        "clickableColorPrimary": "MuiChip-clickableColorPrimary",
        "clickableColorSecondary": "MuiChip-clickableColorSecondary",
        "colorPrimary": "MuiChip-colorPrimary",
        "colorSecondary": "MuiChip-colorSecondary",
        "deletable": "MuiChip-deletable",
        "deletableColorPrimary": "MuiChip-deletableColorPrimary",
        "deletableColorSecondary": "MuiChip-deletableColorSecondary",
        "deleteIcon": "MuiChip-deleteIcon",
        "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
        "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
        "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
        "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
        "icon": "MuiChip-icon",
        "iconColorPrimary": "MuiChip-iconColorPrimary",
        "iconColorSecondary": "MuiChip-iconColorSecondary",
        "label": "MuiChip-label",
        "outlined": "MuiChip-outlined",
        "outlinedPrimary": "MuiChip-outlinedPrimary",
        "outlinedSecondary": "MuiChip-outlinedSecondary",
        "root": "MuiChip-root",
      }
    }
    color="default"
    component="div"
    label="some label"
    onDelete={[Function]}
    tabIndex={-1}
    variant="default"
  >
    <div
      className="MuiChip-root MuiChip-deletable MultiPicker-pickerChip"
      onKeyDown={[Function]}
      onKeyUp={[Function]}
      role="button"
      tabIndex={-1}
    >
      <span
        className="MuiChip-label"
      >
        some label
      </span>
      <pure(Cancel)
        className="MuiChip-deleteIcon"
        onClick={[Function]}
      >
        <Cancel
          className="MuiChip-deleteIcon"
          onClick={[Function]}
        >
          <WithStyles(SvgIcon)
            className="MuiChip-deleteIcon"
            onClick={[Function]}
          >
            <SvgIcon
              className="MuiChip-deleteIcon"
              classes={
                Object {
                  "colorAction": "MuiSvgIcon-colorAction",
                  "colorDisabled": "MuiSvgIcon-colorDisabled",
                  "colorError": "MuiSvgIcon-colorError",
                  "colorPrimary": "MuiSvgIcon-colorPrimary",
                  "colorSecondary": "MuiSvgIcon-colorSecondary",
                  "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                  "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                  "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                  "root": "MuiSvgIcon-root",
                }
              }
              color="inherit"
              component="svg"
              fontSize="default"
              onClick={[Function]}
              viewBox="0 0 24 24"
            >
              <svg
                aria-hidden="true"
                className="MuiSvgIcon-root MuiChip-deleteIcon"
                focusable="false"
                onClick={[Function]}
                role="presentation"
                viewBox="0 0 24 24"
              >
                <path
                  d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
                />
              </svg>
            </SvgIcon>
          </WithStyles(SvgIcon)>
        </Cancel>
      </pure(Cancel)>
    </div>
  </Chip>
</WithStyles(Chip)>
`;

exports[`MultiPicker component renders custom suggestion components 1`] = `
<WithStyles(PickerSuggestions)
  SuggestionComponent={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "inputValue": "some text",
            "isHighlighted": false,
            "item": "some suggestion",
            "itemId": "some suggestion",
          },
          Object {},
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": <span>
            Some Custom Suggestion
          </span>,
        },
      ],
    }
  }
  clearItems={[Function]}
  clearSelection={[Function]}
  closeMenu={[Function]}
  getItemProps={[Function]}
  getLabelProps={[Function]}
  getMenuProps={[Function]}
  getRootProps={[Function]}
  getSuggestedItems={[Function]}
  getToggleButtonProps={[Function]}
  highlightedIndex={null}
  id="downshift-0"
  inputValue="some text"
  itemToString={[Function]}
  openMenu={[Function]}
  pickedItems={Array []}
  reset={[Function]}
  selectHighlightedItem={[Function]}
  selectItem={[Function]}
  selectItemAtIndex={[Function]}
  selectedItem={null}
  setHighlightedIndex={[Function]}
  setItemCount={[Function]}
  setState={[Function]}
  suggestions={
    Array [
      "some suggestion",
    ]
  }
  toggleMenu={[Function]}
  unsetItemCount={[Function]}
>
  <PickerSuggestions
    SuggestionComponent={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "inputValue": "some text",
              "isHighlighted": false,
              "item": "some suggestion",
              "itemId": "some suggestion",
            },
            Object {},
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": <span>
              Some Custom Suggestion
            </span>,
          },
        ],
      }
    }
    classes={
      Object {
        "highlighted": "PickerSuggestions-highlighted",
      }
    }
    clearItems={[Function]}
    clearSelection={[Function]}
    closeMenu={[Function]}
    getItemProps={[Function]}
    getLabelProps={[Function]}
    getMenuProps={[Function]}
    getRootProps={[Function]}
    getSuggestedItems={[Function]}
    getToggleButtonProps={[Function]}
    highlightedIndex={null}
    id="downshift-0"
    inputValue="some text"
    itemToString={[Function]}
    openMenu={[Function]}
    pickedItems={Array []}
    reset={[Function]}
    selectHighlightedItem={[Function]}
    selectItem={[Function]}
    selectItemAtIndex={[Function]}
    selectedItem={null}
    setHighlightedIndex={[Function]}
    setItemCount={[Function]}
    setState={[Function]}
    suggestions={
      Array [
        "some suggestion",
      ]
    }
    toggleMenu={[Function]}
    unsetItemCount={[Function]}
  >
    <WithStyles(MenuItem)
      aria-selected={false}
      className=""
      id="downshift-0-item-0"
      key="some suggestion"
      onClick={[Function]}
      onMouseDown={[Function]}
      onMouseMove={[Function]}
      role="menuitem"
      style={
        Object {
          "height": "auto",
          "padding": 0,
        }
      }
    >
      <MenuItem
        aria-selected={false}
        className=""
        classes={
          Object {
            "gutters": "MuiMenuItem-gutters",
            "root": "MuiMenuItem-root",
            "selected": "MuiMenuItem-selected",
          }
        }
        component="li"
        disableGutters={false}
        id="downshift-0-item-0"
        onClick={[Function]}
        onMouseDown={[Function]}
        onMouseMove={[Function]}
        role="menuitem"
        style={
          Object {
            "height": "auto",
            "padding": 0,
          }
        }
      >
        <WithStyles(ListItem)
          aria-selected={false}
          button={true}
          className="MuiMenuItem-root MuiMenuItem-gutters"
          component="li"
          disableGutters={false}
          id="downshift-0-item-0"
          onClick={[Function]}
          onMouseDown={[Function]}
          onMouseMove={[Function]}
          role="menuitem"
          style={
            Object {
              "height": "auto",
              "padding": 0,
            }
          }
          tabIndex={-1}
        >
          <ListItem
            ContainerComponent="li"
            alignItems="center"
            aria-selected={false}
            button={true}
            className="MuiMenuItem-root MuiMenuItem-gutters"
            classes={
              Object {
                "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
                "button": "MuiListItem-button",
                "container": "MuiListItem-container",
                "default": "MuiListItem-default",
                "dense": "MuiListItem-dense",
                "disabled": "MuiListItem-disabled",
                "divider": "MuiListItem-divider",
                "focusVisible": "MuiListItem-focusVisible",
                "gutters": "MuiListItem-gutters",
                "root": "MuiListItem-root",
                "secondaryAction": "MuiListItem-secondaryAction",
                "selected": "MuiListItem-selected",
              }
            }
            component="li"
            dense={false}
            disableGutters={false}
            disabled={false}
            divider={false}
            id="downshift-0-item-0"
            onClick={[Function]}
            onMouseDown={[Function]}
            onMouseMove={[Function]}
            role="menuitem"
            selected={false}
            style={
              Object {
                "height": "auto",
                "padding": 0,
              }
            }
            tabIndex={-1}
          >
            <MergeListContext
              alignItems="center"
              dense={false}
            >
              <WithStyles(ButtonBase)
                aria-selected={false}
                className="MuiListItem-root MuiListItem-default MuiListItem-gutters MuiListItem-button MuiMenuItem-root MuiMenuItem-gutters"
                component="li"
                disabled={false}
                focusVisibleClassName="MuiListItem-focusVisible"
                id="downshift-0-item-0"
                onClick={[Function]}
                onMouseDown={[Function]}
                onMouseMove={[Function]}
                role="menuitem"
                style={
                  Object {
                    "height": "auto",
                    "padding": 0,
                  }
                }
                tabIndex={-1}
              >
                <ButtonBase
                  aria-selected={false}
                  centerRipple={false}
                  className="MuiListItem-root MuiListItem-default MuiListItem-gutters MuiListItem-button MuiMenuItem-root MuiMenuItem-gutters"
                  classes={
                    Object {
                      "disabled": "MuiButtonBase-disabled",
                      "focusVisible": "MuiButtonBase-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="li"
                  disableRipple={false}
                  disableTouchRipple={false}
                  disabled={false}
                  focusRipple={false}
                  focusVisibleClassName="MuiListItem-focusVisible"
                  id="downshift-0-item-0"
                  onClick={[Function]}
                  onMouseDown={[Function]}
                  onMouseMove={[Function]}
                  role="menuitem"
                  style={
                    Object {
                      "height": "auto",
                      "padding": 0,
                    }
                  }
                  tabIndex={-1}
                  type="button"
                >
                  <li
                    aria-selected={false}
                    className="MuiButtonBase-root MuiListItem-root MuiListItem-default MuiListItem-gutters MuiListItem-button MuiMenuItem-root MuiMenuItem-gutters"
                    id="downshift-0-item-0"
                    onBlur={[Function]}
                    onClick={[Function]}
                    onContextMenu={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseMove={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    role="menuitem"
                    style={
                      Object {
                        "height": "auto",
                        "padding": 0,
                      }
                    }
                    tabIndex={-1}
                  >
                    <mockConstructor
                      inputValue="some text"
                      isHighlighted={false}
                      item="some suggestion"
                      itemId="some suggestion"
                      key=".0"
                    >
                      <span>
                        Some Custom Suggestion
                      </span>
                    </mockConstructor>
                    <NoSsr
                      defer={false}
                      fallback={null}
                    >
                      <WithStyles(TouchRipple)
                        center={false}
                        innerRef={[Function]}
                      >
                        <TouchRipple
                          center={false}
                          classes={
                            Object {
                              "child": "MuiTouchRipple-child",
                              "childLeaving": "MuiTouchRipple-childLeaving",
                              "childPulsate": "MuiTouchRipple-childPulsate",
                              "ripple": "MuiTouchRipple-ripple",
                              "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                              "rippleVisible": "MuiTouchRipple-rippleVisible",
                              "root": "MuiTouchRipple-root",
                            }
                          }
                        >
                          <TransitionGroup
                            childFactory={[Function]}
                            className="MuiTouchRipple-root"
                            component="span"
                            enter={true}
                            exit={true}
                          >
                            <span
                              className="MuiTouchRipple-root"
                            />
                          </TransitionGroup>
                        </TouchRipple>
                      </WithStyles(TouchRipple)>
                    </NoSsr>
                  </li>
                </ButtonBase>
              </WithStyles(ButtonBase)>
            </MergeListContext>
          </ListItem>
        </WithStyles(ListItem)>
      </MenuItem>
    </WithStyles(MenuItem)>
  </PickerSuggestions>
</WithStyles(PickerSuggestions)>
`;

exports[`MultiPicker component shows an custom error message if the user provides the ErrorComponent prop 1`] = `
<WithStyles(PickerSuggestions)
  ErrorComponent={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "error": [Error: fail],
            "inputValue": "some text",
          },
          Object {},
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": <span>
            Oh dear
          </span>,
        },
      ],
    }
  }
  clearItems={[Function]}
  clearSelection={[Function]}
  closeMenu={[Function]}
  getItemProps={[Function]}
  getLabelProps={[Function]}
  getMenuProps={[Function]}
  getRootProps={[Function]}
  getSuggestedItems={[Function]}
  getToggleButtonProps={[Function]}
  highlightedIndex={null}
  id="downshift-0"
  inputValue="some text"
  itemToString={[Function]}
  openMenu={[Function]}
  pickedItems={Array []}
  reset={[Function]}
  selectHighlightedItem={[Function]}
  selectItem={[Function]}
  selectItemAtIndex={[Function]}
  selectedItem={null}
  setHighlightedIndex={[Function]}
  setItemCount={[Function]}
  setState={[Function]}
  suggestions={[Error: fail]}
  toggleMenu={[Function]}
  unsetItemCount={[Function]}
>
  <PickerSuggestions
    ErrorComponent={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "error": [Error: fail],
              "inputValue": "some text",
            },
            Object {},
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": <span>
              Oh dear
            </span>,
          },
        ],
      }
    }
    classes={
      Object {
        "highlighted": "PickerSuggestions-highlighted",
      }
    }
    clearItems={[Function]}
    clearSelection={[Function]}
    closeMenu={[Function]}
    getItemProps={[Function]}
    getLabelProps={[Function]}
    getMenuProps={[Function]}
    getRootProps={[Function]}
    getSuggestedItems={[Function]}
    getToggleButtonProps={[Function]}
    highlightedIndex={null}
    id="downshift-0"
    inputValue="some text"
    itemToString={[Function]}
    openMenu={[Function]}
    pickedItems={Array []}
    reset={[Function]}
    selectHighlightedItem={[Function]}
    selectItem={[Function]}
    selectItemAtIndex={[Function]}
    selectedItem={null}
    setHighlightedIndex={[Function]}
    setItemCount={[Function]}
    setState={[Function]}
    suggestions={[Error: fail]}
    toggleMenu={[Function]}
    unsetItemCount={[Function]}
  >
    <mockConstructor
      error={[Error: fail]}
      inputValue="some text"
    >
      <span>
        Oh dear
      </span>
    </mockConstructor>
  </PickerSuggestions>
</WithStyles(PickerSuggestions)>
`;
