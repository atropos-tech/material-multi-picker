// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MultiPicker component renders custom chip avatars 1`] = `
<JssProvider
  generateClassName={[Function]}
>
  <WithStyles(MultiPicker)
    getSuggestedItems={[Function]}
    itemToAvatar={
      [MockFunction] {
        "calls": Array [
          Array [
            "some-item",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": <WithStyles(Avatar)
              src="./missing-image"
            />,
          },
        ],
      }
    }
    itemToString={[Function]}
    onChange={[Function]}
    value={
      Array [
        "some-item",
      ]
    }
  >
    <MultiPicker
      classes={
        Object {
          "pickerChip": "MultiPicker-pickerChip",
        }
      }
      getSuggestedItems={[Function]}
      itemToAvatar={
        [MockFunction] {
          "calls": Array [
            Array [
              "some-item",
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": <WithStyles(Avatar)
                src="./missing-image"
              />,
            },
          ],
        }
      }
      itemToString={[Function]}
      onChange={[Function]}
      value={
        Array [
          "some-item",
        ]
      }
    >
      <Downshift
        defaultHighlightedIndex={null}
        defaultIsOpen={false}
        environment={[Window]}
        fullWidth={true}
        getA11yStatusMessage={[Function]}
        inputValue=""
        itemToString={[Function]}
        onChange={[Function]}
        onInputValueChange={[Function]}
        onOuterClick={[Function]}
        onSelect={[Function]}
        onStateChange={[Function]}
        onUserAction={[Function]}
        scrollIntoView={[Function]}
        selectedItemChanged={[Function]}
        stateReducer={[Function]}
        suppressRefError={false}
      >
        <div
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="downshift-0-label"
          aria-owns={null}
          role="combobox"
          style={
            Object {
              "position": "relative",
            }
          }
        >
          <WithStyles(PickerInput)
            aria-activedescendant={null}
            aria-autocomplete="list"
            aria-controls={null}
            aria-labelledby="downshift-0-label"
            autoComplete="off"
            id="downshift-0-input"
            inputRef={
              Object {
                "current": <input
                  aria-autocomplete="list"
                  aria-invalid="false"
                  aria-labelledby="downshift-0-label"
                  autocomplete="off"
                  class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                  id="downshift-0-input"
                  type="text"
                  value=""
                />,
              }
            }
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            startAdornment={
              <PickerChips
                classes={
                  Object {
                    "pickerChip": "MultiPicker-pickerChip",
                  }
                }
                itemToAvatar={
                  [MockFunction] {
                    "calls": Array [
                      Array [
                        "some-item",
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": <WithStyles(Avatar)
                          src="./missing-image"
                        />,
                      },
                    ],
                  }
                }
                itemToString={[Function]}
                onDelete={[Function]}
                selectedItems={
                  Array [
                    "some-item",
                  ]
                }
              />
            }
            value=""
          >
            <PickerInput
              aria-activedescendant={null}
              aria-autocomplete="list"
              aria-controls={null}
              aria-labelledby="downshift-0-label"
              autoComplete="off"
              classes={
                Object {
                  "InputLabelFilled": "PickerInput-InputLabelFilled",
                  "InputLabelRoot": "PickerInput-InputLabelRoot",
                  "InputLabelShrink": "PickerInput-InputLabelShrink",
                  "InputRoot": "PickerInput-InputRoot",
                  "inputRoot": "PickerInput-inputRoot",
                }
              }
              fullWidth={false}
              id="downshift-0-input"
              inputRef={
                Object {
                  "current": <input
                    aria-autocomplete="list"
                    aria-invalid="false"
                    aria-labelledby="downshift-0-label"
                    autocomplete="off"
                    class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                    id="downshift-0-input"
                    type="text"
                    value=""
                  />,
                }
              }
              label=""
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              startAdornment={
                <PickerChips
                  classes={
                    Object {
                      "pickerChip": "MultiPicker-pickerChip",
                    }
                  }
                  itemToAvatar={
                    [MockFunction] {
                      "calls": Array [
                        Array [
                          "some-item",
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": <WithStyles(Avatar)
                            src="./missing-image"
                          />,
                        },
                      ],
                    }
                  }
                  itemToString={[Function]}
                  onDelete={[Function]}
                  selectedItems={
                    Array [
                      "some-item",
                    ]
                  }
                />
              }
              value=""
            >
              <TextField
                InputLabelProps={
                  Object {
                    "classes": Object {
                      "filled": "PickerInput-InputLabelFilled",
                      "root": "PickerInput-InputLabelRoot",
                      "shrink": "PickerInput-InputLabelShrink",
                    },
                    "shrink": true,
                  }
                }
                InputProps={
                  Object {
                    "classes": Object {
                      "root": "PickerInput-InputRoot",
                    },
                    "inputProps": Object {
                      "aria-activedescendant": null,
                      "aria-autocomplete": "list",
                      "aria-controls": null,
                      "aria-labelledby": "downshift-0-label",
                      "autoComplete": "off",
                      "className": "PickerInput-inputRoot",
                      "id": "downshift-0-input",
                      "onDragStart": undefined,
                      "style": undefined,
                    },
                    "inputRef": Object {
                      "current": <input
                        aria-autocomplete="list"
                        aria-invalid="false"
                        aria-labelledby="downshift-0-label"
                        autocomplete="off"
                        class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                        id="downshift-0-input"
                        type="text"
                        value=""
                      />,
                    },
                    "startAdornment": <PickerChips
                      classes={
                        Object {
                          "pickerChip": "MultiPicker-pickerChip",
                        }
                      }
                      itemToAvatar={
                        [MockFunction] {
                          "calls": Array [
                            Array [
                              "some-item",
                            ],
                          ],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": <WithStyles(Avatar)
                                src="./missing-image"
                              />,
                            },
                          ],
                        }
                      }
                      itemToString={[Function]}
                      onDelete={[Function]}
                      selectedItems={
                        Array [
                          "some-item",
                        ]
                      }
                    />,
                    "style": undefined,
                  }
                }
                fullWidth={false}
                label=""
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                required={false}
                select={false}
                value=""
                variant="standard"
              >
                <WithStyles(FormControl)
                  fullWidth={false}
                  onKeyDown={[Function]}
                  required={false}
                  variant="standard"
                >
                  <FormControl
                    classes={
                      Object {
                        "fullWidth": "MuiFormControl-fullWidth",
                        "marginDense": "MuiFormControl-marginDense",
                        "marginNormal": "MuiFormControl-marginNormal",
                        "root": "MuiFormControl-root",
                      }
                    }
                    component="div"
                    disabled={false}
                    error={false}
                    fullWidth={false}
                    margin="none"
                    onKeyDown={[Function]}
                    required={false}
                    variant="standard"
                  >
                    <div
                      className="MuiFormControl-root"
                      onKeyDown={[Function]}
                    >
                      <WithStyles(Input)
                        classes={
                          Object {
                            "root": "PickerInput-InputRoot",
                          }
                        }
                        fullWidth={false}
                        inputProps={
                          Object {
                            "aria-activedescendant": null,
                            "aria-autocomplete": "list",
                            "aria-controls": null,
                            "aria-labelledby": "downshift-0-label",
                            "autoComplete": "off",
                            "className": "PickerInput-inputRoot",
                            "id": "downshift-0-input",
                            "onDragStart": undefined,
                            "style": undefined,
                          }
                        }
                        inputRef={
                          Object {
                            "current": <input
                              aria-autocomplete="list"
                              aria-invalid="false"
                              aria-labelledby="downshift-0-label"
                              autocomplete="off"
                              class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                              id="downshift-0-input"
                              type="text"
                              value=""
                            />,
                          }
                        }
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        startAdornment={
                          <PickerChips
                            classes={
                              Object {
                                "pickerChip": "MultiPicker-pickerChip",
                              }
                            }
                            itemToAvatar={
                              [MockFunction] {
                                "calls": Array [
                                  Array [
                                    "some-item",
                                  ],
                                ],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": <WithStyles(Avatar)
                                      src="./missing-image"
                                    />,
                                  },
                                ],
                              }
                            }
                            itemToString={[Function]}
                            onDelete={[Function]}
                            selectedItems={
                              Array [
                                "some-item",
                              ]
                            }
                          />
                        }
                        value=""
                      >
                        <Input
                          classes={
                            Object {
                              "disabled": "MuiInput-disabled",
                              "error": "MuiInput-error",
                              "focused": "MuiInput-focused",
                              "formControl": "MuiInput-formControl",
                              "fullWidth": "MuiInput-fullWidth",
                              "input": "MuiInput-input",
                              "inputMarginDense": "MuiInput-inputMarginDense",
                              "inputMultiline": "MuiInput-inputMultiline",
                              "inputType": "MuiInput-inputType",
                              "inputTypeSearch": "MuiInput-inputTypeSearch",
                              "multiline": "MuiInput-multiline",
                              "root": "MuiInput-root PickerInput-InputRoot",
                              "underline": "MuiInput-underline",
                            }
                          }
                          fullWidth={false}
                          inputProps={
                            Object {
                              "aria-activedescendant": null,
                              "aria-autocomplete": "list",
                              "aria-controls": null,
                              "aria-labelledby": "downshift-0-label",
                              "autoComplete": "off",
                              "className": "PickerInput-inputRoot",
                              "id": "downshift-0-input",
                              "onDragStart": undefined,
                              "style": undefined,
                            }
                          }
                          inputRef={
                            Object {
                              "current": <input
                                aria-autocomplete="list"
                                aria-invalid="false"
                                aria-labelledby="downshift-0-label"
                                autocomplete="off"
                                class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                                id="downshift-0-input"
                                type="text"
                                value=""
                              />,
                            }
                          }
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          startAdornment={
                            <PickerChips
                              classes={
                                Object {
                                  "pickerChip": "MultiPicker-pickerChip",
                                }
                              }
                              itemToAvatar={
                                [MockFunction] {
                                  "calls": Array [
                                    Array [
                                      "some-item",
                                    ],
                                  ],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": <WithStyles(Avatar)
                                        src="./missing-image"
                                      />,
                                    },
                                  ],
                                }
                              }
                              itemToString={[Function]}
                              onDelete={[Function]}
                              selectedItems={
                                Array [
                                  "some-item",
                                ]
                              }
                            />
                          }
                          value=""
                        >
                          <WithStyles(WithFormControlContext(InputBase))
                            classes={
                              Object {
                                "disabled": "MuiInput-disabled",
                                "error": "MuiInput-error",
                                "focused": "MuiInput-focused",
                                "formControl": "MuiInput-formControl",
                                "fullWidth": "MuiInput-fullWidth",
                                "input": "MuiInput-input",
                                "inputMarginDense": "MuiInput-inputMarginDense",
                                "inputMultiline": "MuiInput-inputMultiline",
                                "inputType": "MuiInput-inputType",
                                "inputTypeSearch": "MuiInput-inputTypeSearch",
                                "multiline": "MuiInput-multiline",
                                "root": "MuiInput-root PickerInput-InputRoot MuiInput-underline",
                                "underline": null,
                              }
                            }
                            fullWidth={false}
                            inputComponent="input"
                            inputProps={
                              Object {
                                "aria-activedescendant": null,
                                "aria-autocomplete": "list",
                                "aria-controls": null,
                                "aria-labelledby": "downshift-0-label",
                                "autoComplete": "off",
                                "className": "PickerInput-inputRoot",
                                "id": "downshift-0-input",
                                "onDragStart": undefined,
                                "style": undefined,
                              }
                            }
                            inputRef={
                              Object {
                                "current": <input
                                  aria-autocomplete="list"
                                  aria-invalid="false"
                                  aria-labelledby="downshift-0-label"
                                  autocomplete="off"
                                  class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                                  id="downshift-0-input"
                                  type="text"
                                  value=""
                                />,
                              }
                            }
                            multiline={false}
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            startAdornment={
                              <PickerChips
                                classes={
                                  Object {
                                    "pickerChip": "MultiPicker-pickerChip",
                                  }
                                }
                                itemToAvatar={
                                  [MockFunction] {
                                    "calls": Array [
                                      Array [
                                        "some-item",
                                      ],
                                    ],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": <WithStyles(Avatar)
                                          src="./missing-image"
                                        />,
                                      },
                                    ],
                                  }
                                }
                                itemToString={[Function]}
                                onDelete={[Function]}
                                selectedItems={
                                  Array [
                                    "some-item",
                                  ]
                                }
                              />
                            }
                            type="text"
                            value=""
                          >
                            <WithFormControlContext(InputBase)
                              classes={
                                Object {
                                  "adornedEnd": "MuiInputBase-adornedEnd",
                                  "adornedStart": "MuiInputBase-adornedStart",
                                  "disabled": "MuiInputBase-disabled MuiInput-disabled",
                                  "error": "MuiInputBase-error MuiInput-error",
                                  "focused": "MuiInputBase-focused MuiInput-focused",
                                  "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                  "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                  "input": "MuiInputBase-input MuiInput-input",
                                  "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                  "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                  "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                  "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                  "inputType": "MuiInputBase-inputType MuiInput-inputType",
                                  "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                  "marginDense": "MuiInputBase-marginDense",
                                  "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                  "root": "MuiInputBase-root MuiInput-root PickerInput-InputRoot MuiInput-underline",
                                }
                              }
                              fullWidth={false}
                              inputComponent="input"
                              inputProps={
                                Object {
                                  "aria-activedescendant": null,
                                  "aria-autocomplete": "list",
                                  "aria-controls": null,
                                  "aria-labelledby": "downshift-0-label",
                                  "autoComplete": "off",
                                  "className": "PickerInput-inputRoot",
                                  "id": "downshift-0-input",
                                  "onDragStart": undefined,
                                  "style": undefined,
                                }
                              }
                              inputRef={
                                Object {
                                  "current": <input
                                    aria-autocomplete="list"
                                    aria-invalid="false"
                                    aria-labelledby="downshift-0-label"
                                    autocomplete="off"
                                    class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                                    id="downshift-0-input"
                                    type="text"
                                    value=""
                                  />,
                                }
                              }
                              multiline={false}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              startAdornment={
                                <PickerChips
                                  classes={
                                    Object {
                                      "pickerChip": "MultiPicker-pickerChip",
                                    }
                                  }
                                  itemToAvatar={
                                    [MockFunction] {
                                      "calls": Array [
                                        Array [
                                          "some-item",
                                        ],
                                      ],
                                      "results": Array [
                                        Object {
                                          "type": "return",
                                          "value": <WithStyles(Avatar)
                                            src="./missing-image"
                                          />,
                                        },
                                      ],
                                    }
                                  }
                                  itemToString={[Function]}
                                  onDelete={[Function]}
                                  selectedItems={
                                    Array [
                                      "some-item",
                                    ]
                                  }
                                />
                              }
                              type="text"
                              value=""
                            >
                              <InputBase
                                classes={
                                  Object {
                                    "adornedEnd": "MuiInputBase-adornedEnd",
                                    "adornedStart": "MuiInputBase-adornedStart",
                                    "disabled": "MuiInputBase-disabled MuiInput-disabled",
                                    "error": "MuiInputBase-error MuiInput-error",
                                    "focused": "MuiInputBase-focused MuiInput-focused",
                                    "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                    "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                    "input": "MuiInputBase-input MuiInput-input",
                                    "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                    "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                    "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                    "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                    "inputType": "MuiInputBase-inputType MuiInput-inputType",
                                    "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                    "marginDense": "MuiInputBase-marginDense",
                                    "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                    "root": "MuiInputBase-root MuiInput-root PickerInput-InputRoot MuiInput-underline",
                                  }
                                }
                                fullWidth={false}
                                inputComponent="input"
                                inputProps={
                                  Object {
                                    "aria-activedescendant": null,
                                    "aria-autocomplete": "list",
                                    "aria-controls": null,
                                    "aria-labelledby": "downshift-0-label",
                                    "autoComplete": "off",
                                    "className": "PickerInput-inputRoot",
                                    "id": "downshift-0-input",
                                    "onDragStart": undefined,
                                    "style": undefined,
                                  }
                                }
                                inputRef={
                                  Object {
                                    "current": <input
                                      aria-autocomplete="list"
                                      aria-invalid="false"
                                      aria-labelledby="downshift-0-label"
                                      autocomplete="off"
                                      class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                                      id="downshift-0-input"
                                      type="text"
                                      value=""
                                    />,
                                  }
                                }
                                muiFormControl={
                                  Object {
                                    "adornedStart": true,
                                    "disabled": false,
                                    "error": false,
                                    "filled": false,
                                    "focused": false,
                                    "margin": "none",
                                    "onBlur": [Function],
                                    "onEmpty": [Function],
                                    "onFilled": [Function],
                                    "onFocus": [Function],
                                    "required": false,
                                    "variant": "standard",
                                  }
                                }
                                multiline={false}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                startAdornment={
                                  <PickerChips
                                    classes={
                                      Object {
                                        "pickerChip": "MultiPicker-pickerChip",
                                      }
                                    }
                                    itemToAvatar={
                                      [MockFunction] {
                                        "calls": Array [
                                          Array [
                                            "some-item",
                                          ],
                                        ],
                                        "results": Array [
                                          Object {
                                            "type": "return",
                                            "value": <WithStyles(Avatar)
                                              src="./missing-image"
                                            />,
                                          },
                                        ],
                                      }
                                    }
                                    itemToString={[Function]}
                                    onDelete={[Function]}
                                    selectedItems={
                                      Array [
                                        "some-item",
                                      ]
                                    }
                                  />
                                }
                                type="text"
                                value=""
                              >
                                <div
                                  className="MuiInputBase-root MuiInput-root PickerInput-InputRoot MuiInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedStart"
                                  onClick={[Function]}
                                >
                                  <PickerChips
                                    classes={
                                      Object {
                                        "pickerChip": "MultiPicker-pickerChip",
                                      }
                                    }
                                    itemToAvatar={
                                      [MockFunction] {
                                        "calls": Array [
                                          Array [
                                            "some-item",
                                          ],
                                        ],
                                        "results": Array [
                                          Object {
                                            "type": "return",
                                            "value": <WithStyles(Avatar)
                                              src="./missing-image"
                                            />,
                                          },
                                        ],
                                      }
                                    }
                                    itemToString={[Function]}
                                    key="picker-chips"
                                    onDelete={[Function]}
                                    selectedItems={
                                      Array [
                                        "some-item",
                                      ]
                                    }
                                  >
                                    <ChipWithPopover
                                      avatar={
                                        <WithStyles(Avatar)
                                          src="./missing-image"
                                        />
                                      }
                                      className="MultiPicker-pickerChip"
                                      key="some-item"
                                      label="some-item"
                                      onDelete={[Function]}
                                      tabIndex={-1}
                                      variant="default"
                                    >
                                      <WithStyles(Chip)
                                        avatar={
                                          <WithStyles(Avatar)
                                            src="./missing-image"
                                          />
                                        }
                                        className="MultiPicker-pickerChip"
                                        label="some-item"
                                        onDelete={[Function]}
                                        tabIndex={-1}
                                        variant="default"
                                      >
                                        <Chip
                                          avatar={
                                            <WithStyles(Avatar)
                                              src="./missing-image"
                                            />
                                          }
                                          className="MultiPicker-pickerChip"
                                          classes={
                                            Object {
                                              "avatar": "MuiChip-avatar",
                                              "avatarChildren": "MuiChip-avatarChildren",
                                              "avatarColorPrimary": "MuiChip-avatarColorPrimary",
                                              "avatarColorSecondary": "MuiChip-avatarColorSecondary",
                                              "clickable": "MuiChip-clickable",
                                              "clickableColorPrimary": "MuiChip-clickableColorPrimary",
                                              "clickableColorSecondary": "MuiChip-clickableColorSecondary",
                                              "colorPrimary": "MuiChip-colorPrimary",
                                              "colorSecondary": "MuiChip-colorSecondary",
                                              "deletable": "MuiChip-deletable",
                                              "deletableColorPrimary": "MuiChip-deletableColorPrimary",
                                              "deletableColorSecondary": "MuiChip-deletableColorSecondary",
                                              "deleteIcon": "MuiChip-deleteIcon",
                                              "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
                                              "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
                                              "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
                                              "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
                                              "icon": "MuiChip-icon",
                                              "iconColorPrimary": "MuiChip-iconColorPrimary",
                                              "iconColorSecondary": "MuiChip-iconColorSecondary",
                                              "label": "MuiChip-label",
                                              "outlined": "MuiChip-outlined",
                                              "outlinedPrimary": "MuiChip-outlinedPrimary",
                                              "outlinedSecondary": "MuiChip-outlinedSecondary",
                                              "root": "MuiChip-root",
                                            }
                                          }
                                          color="default"
                                          component="div"
                                          label="some-item"
                                          onDelete={[Function]}
                                          tabIndex={-1}
                                          variant="default"
                                        >
                                          <div
                                            className="MuiChip-root MuiChip-deletable MultiPicker-pickerChip"
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            tabIndex={-1}
                                          >
                                            <WithStyles(Avatar)
                                              childrenClassName="MuiChip-avatarChildren"
                                              className="MuiChip-avatar"
                                              src="./missing-image"
                                            >
                                              <Avatar
                                                childrenClassName="MuiChip-avatarChildren"
                                                className="MuiChip-avatar"
                                                classes={
                                                  Object {
                                                    "colorDefault": "MuiAvatar-colorDefault",
                                                    "img": "MuiAvatar-img",
                                                    "root": "MuiAvatar-root",
                                                  }
                                                }
                                                component="div"
                                                src="./missing-image"
                                              >
                                                <div
                                                  className="MuiAvatar-root MuiChip-avatar"
                                                >
                                                  <img
                                                    className="MuiAvatar-img"
                                                    src="./missing-image"
                                                  />
                                                </div>
                                              </Avatar>
                                            </WithStyles(Avatar)>
                                            <span
                                              className="MuiChip-label"
                                            >
                                              some-item
                                            </span>
                                            <pure(Cancel)
                                              className="MuiChip-deleteIcon"
                                              onClick={[Function]}
                                            >
                                              <Cancel
                                                className="MuiChip-deleteIcon"
                                                onClick={[Function]}
                                              >
                                                <WithStyles(SvgIcon)
                                                  className="MuiChip-deleteIcon"
                                                  onClick={[Function]}
                                                >
                                                  <SvgIcon
                                                    className="MuiChip-deleteIcon"
                                                    classes={
                                                      Object {
                                                        "colorAction": "MuiSvgIcon-colorAction",
                                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                        "colorError": "MuiSvgIcon-colorError",
                                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                        "root": "MuiSvgIcon-root",
                                                      }
                                                    }
                                                    color="inherit"
                                                    component="svg"
                                                    fontSize="default"
                                                    onClick={[Function]}
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <svg
                                                      aria-hidden="true"
                                                      className="MuiSvgIcon-root MuiChip-deleteIcon"
                                                      focusable="false"
                                                      onClick={[Function]}
                                                      role="presentation"
                                                      viewBox="0 0 24 24"
                                                    >
                                                      <path
                                                        d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
                                                      />
                                                    </svg>
                                                  </SvgIcon>
                                                </WithStyles(SvgIcon)>
                                              </Cancel>
                                            </pure(Cancel)>
                                          </div>
                                        </Chip>
                                      </WithStyles(Chip)>
                                    </ChipWithPopover>
                                  </PickerChips>
                                  <input
                                    aria-activedescendant={null}
                                    aria-autocomplete="list"
                                    aria-controls={null}
                                    aria-invalid={false}
                                    aria-labelledby="downshift-0-label"
                                    autoComplete="off"
                                    className="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                                    disabled={false}
                                    id="downshift-0-input"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    required={false}
                                    type="text"
                                    value=""
                                  />
                                </div>
                              </InputBase>
                            </WithFormControlContext(InputBase)>
                          </WithStyles(WithFormControlContext(InputBase))>
                        </Input>
                      </WithStyles(Input)>
                    </div>
                  </FormControl>
                </WithStyles(FormControl)>
              </TextField>
            </PickerInput>
          </WithStyles(PickerInput)>
          <DebouncedContainer
            anchorElement={null}
            clearItems={[Function]}
            clearSelection={[Function]}
            closeMenu={[Function]}
            getItemProps={[Function]}
            getLabelProps={[Function]}
            getMenuProps={[Function]}
            getRootProps={[Function]}
            getToggleButtonProps={[Function]}
            highlightedIndex={null}
            id="downshift-0"
            inputValue=""
            isOpen={false}
            itemToString={[Function]}
            openMenu={[Function]}
            reset={[Function]}
            selectHighlightedItem={[Function]}
            selectItem={[Function]}
            selectItemAtIndex={[Function]}
            selectedItem={null}
            setHighlightedIndex={[Function]}
            setItemCount={[Function]}
            setState={[Function]}
            toggleMenu={[Function]}
            unsetItemCount={[Function]}
          >
            <PickerDropdown
              anchorElement={null}
              clearItems={[Function]}
              clearSelection={[Function]}
              closeMenu={[Function]}
              getItemProps={[Function]}
              getLabelProps={[Function]}
              getMenuProps={[Function]}
              getRootProps={[Function]}
              getToggleButtonProps={[Function]}
              highlightedIndex={null}
              id="downshift-0"
              inputValue=""
              isOpen={false}
              itemToString={[Function]}
              openMenu={[Function]}
              reset={[Function]}
              selectHighlightedItem={[Function]}
              selectItem={[Function]}
              selectItemAtIndex={[Function]}
              selectedItem={null}
              setHighlightedIndex={[Function]}
              setItemCount={[Function]}
              setState={[Function]}
              toggleMenu={[Function]}
              unsetItemCount={[Function]}
            />
          </DebouncedContainer>
        </div>
      </Downshift>
    </MultiPicker>
  </WithStyles(MultiPicker)>
</JssProvider>
`;

exports[`MultiPicker component renders custom chip colors 1`] = `
<JssProvider
  generateClassName={[Function]}
>
  <WithStyles(MultiPicker)
    chipColor="secondary"
    getSuggestedItems={[Function]}
    itemToString={[Function]}
    onChange={[Function]}
    value={
      Array [
        "some-item",
      ]
    }
  >
    <MultiPicker
      chipColor="secondary"
      classes={
        Object {
          "pickerChip": "MultiPicker-pickerChip",
        }
      }
      getSuggestedItems={[Function]}
      itemToString={[Function]}
      onChange={[Function]}
      value={
        Array [
          "some-item",
        ]
      }
    >
      <Downshift
        defaultHighlightedIndex={null}
        defaultIsOpen={false}
        environment={[Window]}
        fullWidth={true}
        getA11yStatusMessage={[Function]}
        inputValue=""
        itemToString={[Function]}
        onChange={[Function]}
        onInputValueChange={[Function]}
        onOuterClick={[Function]}
        onSelect={[Function]}
        onStateChange={[Function]}
        onUserAction={[Function]}
        scrollIntoView={[Function]}
        selectedItemChanged={[Function]}
        stateReducer={[Function]}
        suppressRefError={false}
      >
        <div
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="downshift-0-label"
          aria-owns={null}
          role="combobox"
          style={
            Object {
              "position": "relative",
            }
          }
        >
          <WithStyles(PickerInput)
            aria-activedescendant={null}
            aria-autocomplete="list"
            aria-controls={null}
            aria-labelledby="downshift-0-label"
            autoComplete="off"
            id="downshift-0-input"
            inputRef={
              Object {
                "current": <input
                  aria-autocomplete="list"
                  aria-invalid="false"
                  aria-labelledby="downshift-0-label"
                  autocomplete="off"
                  class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                  id="downshift-0-input"
                  type="text"
                  value=""
                />,
              }
            }
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            startAdornment={
              <PickerChips
                classes={
                  Object {
                    "pickerChip": "MultiPicker-pickerChip",
                  }
                }
                color="secondary"
                itemToString={[Function]}
                onDelete={[Function]}
                selectedItems={
                  Array [
                    "some-item",
                  ]
                }
              />
            }
            value=""
          >
            <PickerInput
              aria-activedescendant={null}
              aria-autocomplete="list"
              aria-controls={null}
              aria-labelledby="downshift-0-label"
              autoComplete="off"
              classes={
                Object {
                  "InputLabelFilled": "PickerInput-InputLabelFilled",
                  "InputLabelRoot": "PickerInput-InputLabelRoot",
                  "InputLabelShrink": "PickerInput-InputLabelShrink",
                  "InputRoot": "PickerInput-InputRoot",
                  "inputRoot": "PickerInput-inputRoot",
                }
              }
              fullWidth={false}
              id="downshift-0-input"
              inputRef={
                Object {
                  "current": <input
                    aria-autocomplete="list"
                    aria-invalid="false"
                    aria-labelledby="downshift-0-label"
                    autocomplete="off"
                    class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                    id="downshift-0-input"
                    type="text"
                    value=""
                  />,
                }
              }
              label=""
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              startAdornment={
                <PickerChips
                  classes={
                    Object {
                      "pickerChip": "MultiPicker-pickerChip",
                    }
                  }
                  color="secondary"
                  itemToString={[Function]}
                  onDelete={[Function]}
                  selectedItems={
                    Array [
                      "some-item",
                    ]
                  }
                />
              }
              value=""
            >
              <TextField
                InputLabelProps={
                  Object {
                    "classes": Object {
                      "filled": "PickerInput-InputLabelFilled",
                      "root": "PickerInput-InputLabelRoot",
                      "shrink": "PickerInput-InputLabelShrink",
                    },
                    "shrink": true,
                  }
                }
                InputProps={
                  Object {
                    "classes": Object {
                      "root": "PickerInput-InputRoot",
                    },
                    "inputProps": Object {
                      "aria-activedescendant": null,
                      "aria-autocomplete": "list",
                      "aria-controls": null,
                      "aria-labelledby": "downshift-0-label",
                      "autoComplete": "off",
                      "className": "PickerInput-inputRoot",
                      "id": "downshift-0-input",
                      "onDragStart": undefined,
                      "style": undefined,
                    },
                    "inputRef": Object {
                      "current": <input
                        aria-autocomplete="list"
                        aria-invalid="false"
                        aria-labelledby="downshift-0-label"
                        autocomplete="off"
                        class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                        id="downshift-0-input"
                        type="text"
                        value=""
                      />,
                    },
                    "startAdornment": <PickerChips
                      classes={
                        Object {
                          "pickerChip": "MultiPicker-pickerChip",
                        }
                      }
                      color="secondary"
                      itemToString={[Function]}
                      onDelete={[Function]}
                      selectedItems={
                        Array [
                          "some-item",
                        ]
                      }
                    />,
                    "style": undefined,
                  }
                }
                fullWidth={false}
                label=""
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                required={false}
                select={false}
                value=""
                variant="standard"
              >
                <WithStyles(FormControl)
                  fullWidth={false}
                  onKeyDown={[Function]}
                  required={false}
                  variant="standard"
                >
                  <FormControl
                    classes={
                      Object {
                        "fullWidth": "MuiFormControl-fullWidth",
                        "marginDense": "MuiFormControl-marginDense",
                        "marginNormal": "MuiFormControl-marginNormal",
                        "root": "MuiFormControl-root",
                      }
                    }
                    component="div"
                    disabled={false}
                    error={false}
                    fullWidth={false}
                    margin="none"
                    onKeyDown={[Function]}
                    required={false}
                    variant="standard"
                  >
                    <div
                      className="MuiFormControl-root"
                      onKeyDown={[Function]}
                    >
                      <WithStyles(Input)
                        classes={
                          Object {
                            "root": "PickerInput-InputRoot",
                          }
                        }
                        fullWidth={false}
                        inputProps={
                          Object {
                            "aria-activedescendant": null,
                            "aria-autocomplete": "list",
                            "aria-controls": null,
                            "aria-labelledby": "downshift-0-label",
                            "autoComplete": "off",
                            "className": "PickerInput-inputRoot",
                            "id": "downshift-0-input",
                            "onDragStart": undefined,
                            "style": undefined,
                          }
                        }
                        inputRef={
                          Object {
                            "current": <input
                              aria-autocomplete="list"
                              aria-invalid="false"
                              aria-labelledby="downshift-0-label"
                              autocomplete="off"
                              class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                              id="downshift-0-input"
                              type="text"
                              value=""
                            />,
                          }
                        }
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        startAdornment={
                          <PickerChips
                            classes={
                              Object {
                                "pickerChip": "MultiPicker-pickerChip",
                              }
                            }
                            color="secondary"
                            itemToString={[Function]}
                            onDelete={[Function]}
                            selectedItems={
                              Array [
                                "some-item",
                              ]
                            }
                          />
                        }
                        value=""
                      >
                        <Input
                          classes={
                            Object {
                              "disabled": "MuiInput-disabled",
                              "error": "MuiInput-error",
                              "focused": "MuiInput-focused",
                              "formControl": "MuiInput-formControl",
                              "fullWidth": "MuiInput-fullWidth",
                              "input": "MuiInput-input",
                              "inputMarginDense": "MuiInput-inputMarginDense",
                              "inputMultiline": "MuiInput-inputMultiline",
                              "inputType": "MuiInput-inputType",
                              "inputTypeSearch": "MuiInput-inputTypeSearch",
                              "multiline": "MuiInput-multiline",
                              "root": "MuiInput-root PickerInput-InputRoot",
                              "underline": "MuiInput-underline",
                            }
                          }
                          fullWidth={false}
                          inputProps={
                            Object {
                              "aria-activedescendant": null,
                              "aria-autocomplete": "list",
                              "aria-controls": null,
                              "aria-labelledby": "downshift-0-label",
                              "autoComplete": "off",
                              "className": "PickerInput-inputRoot",
                              "id": "downshift-0-input",
                              "onDragStart": undefined,
                              "style": undefined,
                            }
                          }
                          inputRef={
                            Object {
                              "current": <input
                                aria-autocomplete="list"
                                aria-invalid="false"
                                aria-labelledby="downshift-0-label"
                                autocomplete="off"
                                class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                                id="downshift-0-input"
                                type="text"
                                value=""
                              />,
                            }
                          }
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          startAdornment={
                            <PickerChips
                              classes={
                                Object {
                                  "pickerChip": "MultiPicker-pickerChip",
                                }
                              }
                              color="secondary"
                              itemToString={[Function]}
                              onDelete={[Function]}
                              selectedItems={
                                Array [
                                  "some-item",
                                ]
                              }
                            />
                          }
                          value=""
                        >
                          <WithStyles(WithFormControlContext(InputBase))
                            classes={
                              Object {
                                "disabled": "MuiInput-disabled",
                                "error": "MuiInput-error",
                                "focused": "MuiInput-focused",
                                "formControl": "MuiInput-formControl",
                                "fullWidth": "MuiInput-fullWidth",
                                "input": "MuiInput-input",
                                "inputMarginDense": "MuiInput-inputMarginDense",
                                "inputMultiline": "MuiInput-inputMultiline",
                                "inputType": "MuiInput-inputType",
                                "inputTypeSearch": "MuiInput-inputTypeSearch",
                                "multiline": "MuiInput-multiline",
                                "root": "MuiInput-root PickerInput-InputRoot MuiInput-underline",
                                "underline": null,
                              }
                            }
                            fullWidth={false}
                            inputComponent="input"
                            inputProps={
                              Object {
                                "aria-activedescendant": null,
                                "aria-autocomplete": "list",
                                "aria-controls": null,
                                "aria-labelledby": "downshift-0-label",
                                "autoComplete": "off",
                                "className": "PickerInput-inputRoot",
                                "id": "downshift-0-input",
                                "onDragStart": undefined,
                                "style": undefined,
                              }
                            }
                            inputRef={
                              Object {
                                "current": <input
                                  aria-autocomplete="list"
                                  aria-invalid="false"
                                  aria-labelledby="downshift-0-label"
                                  autocomplete="off"
                                  class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                                  id="downshift-0-input"
                                  type="text"
                                  value=""
                                />,
                              }
                            }
                            multiline={false}
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            startAdornment={
                              <PickerChips
                                classes={
                                  Object {
                                    "pickerChip": "MultiPicker-pickerChip",
                                  }
                                }
                                color="secondary"
                                itemToString={[Function]}
                                onDelete={[Function]}
                                selectedItems={
                                  Array [
                                    "some-item",
                                  ]
                                }
                              />
                            }
                            type="text"
                            value=""
                          >
                            <WithFormControlContext(InputBase)
                              classes={
                                Object {
                                  "adornedEnd": "MuiInputBase-adornedEnd",
                                  "adornedStart": "MuiInputBase-adornedStart",
                                  "disabled": "MuiInputBase-disabled MuiInput-disabled",
                                  "error": "MuiInputBase-error MuiInput-error",
                                  "focused": "MuiInputBase-focused MuiInput-focused",
                                  "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                  "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                  "input": "MuiInputBase-input MuiInput-input",
                                  "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                  "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                  "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                  "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                  "inputType": "MuiInputBase-inputType MuiInput-inputType",
                                  "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                  "marginDense": "MuiInputBase-marginDense",
                                  "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                  "root": "MuiInputBase-root MuiInput-root PickerInput-InputRoot MuiInput-underline",
                                }
                              }
                              fullWidth={false}
                              inputComponent="input"
                              inputProps={
                                Object {
                                  "aria-activedescendant": null,
                                  "aria-autocomplete": "list",
                                  "aria-controls": null,
                                  "aria-labelledby": "downshift-0-label",
                                  "autoComplete": "off",
                                  "className": "PickerInput-inputRoot",
                                  "id": "downshift-0-input",
                                  "onDragStart": undefined,
                                  "style": undefined,
                                }
                              }
                              inputRef={
                                Object {
                                  "current": <input
                                    aria-autocomplete="list"
                                    aria-invalid="false"
                                    aria-labelledby="downshift-0-label"
                                    autocomplete="off"
                                    class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                                    id="downshift-0-input"
                                    type="text"
                                    value=""
                                  />,
                                }
                              }
                              multiline={false}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              startAdornment={
                                <PickerChips
                                  classes={
                                    Object {
                                      "pickerChip": "MultiPicker-pickerChip",
                                    }
                                  }
                                  color="secondary"
                                  itemToString={[Function]}
                                  onDelete={[Function]}
                                  selectedItems={
                                    Array [
                                      "some-item",
                                    ]
                                  }
                                />
                              }
                              type="text"
                              value=""
                            >
                              <InputBase
                                classes={
                                  Object {
                                    "adornedEnd": "MuiInputBase-adornedEnd",
                                    "adornedStart": "MuiInputBase-adornedStart",
                                    "disabled": "MuiInputBase-disabled MuiInput-disabled",
                                    "error": "MuiInputBase-error MuiInput-error",
                                    "focused": "MuiInputBase-focused MuiInput-focused",
                                    "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                    "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                    "input": "MuiInputBase-input MuiInput-input",
                                    "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                    "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                    "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                    "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                    "inputType": "MuiInputBase-inputType MuiInput-inputType",
                                    "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                    "marginDense": "MuiInputBase-marginDense",
                                    "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                    "root": "MuiInputBase-root MuiInput-root PickerInput-InputRoot MuiInput-underline",
                                  }
                                }
                                fullWidth={false}
                                inputComponent="input"
                                inputProps={
                                  Object {
                                    "aria-activedescendant": null,
                                    "aria-autocomplete": "list",
                                    "aria-controls": null,
                                    "aria-labelledby": "downshift-0-label",
                                    "autoComplete": "off",
                                    "className": "PickerInput-inputRoot",
                                    "id": "downshift-0-input",
                                    "onDragStart": undefined,
                                    "style": undefined,
                                  }
                                }
                                inputRef={
                                  Object {
                                    "current": <input
                                      aria-autocomplete="list"
                                      aria-invalid="false"
                                      aria-labelledby="downshift-0-label"
                                      autocomplete="off"
                                      class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                                      id="downshift-0-input"
                                      type="text"
                                      value=""
                                    />,
                                  }
                                }
                                muiFormControl={
                                  Object {
                                    "adornedStart": true,
                                    "disabled": false,
                                    "error": false,
                                    "filled": false,
                                    "focused": false,
                                    "margin": "none",
                                    "onBlur": [Function],
                                    "onEmpty": [Function],
                                    "onFilled": [Function],
                                    "onFocus": [Function],
                                    "required": false,
                                    "variant": "standard",
                                  }
                                }
                                multiline={false}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                startAdornment={
                                  <PickerChips
                                    classes={
                                      Object {
                                        "pickerChip": "MultiPicker-pickerChip",
                                      }
                                    }
                                    color="secondary"
                                    itemToString={[Function]}
                                    onDelete={[Function]}
                                    selectedItems={
                                      Array [
                                        "some-item",
                                      ]
                                    }
                                  />
                                }
                                type="text"
                                value=""
                              >
                                <div
                                  className="MuiInputBase-root MuiInput-root PickerInput-InputRoot MuiInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedStart"
                                  onClick={[Function]}
                                >
                                  <PickerChips
                                    classes={
                                      Object {
                                        "pickerChip": "MultiPicker-pickerChip",
                                      }
                                    }
                                    color="secondary"
                                    itemToString={[Function]}
                                    key="picker-chips"
                                    onDelete={[Function]}
                                    selectedItems={
                                      Array [
                                        "some-item",
                                      ]
                                    }
                                  >
                                    <ChipWithPopover
                                      className="MultiPicker-pickerChip"
                                      color="secondary"
                                      key="some-item"
                                      label="some-item"
                                      onDelete={[Function]}
                                      tabIndex={-1}
                                      variant="default"
                                    >
                                      <WithStyles(Chip)
                                        className="MultiPicker-pickerChip"
                                        color="secondary"
                                        label="some-item"
                                        onDelete={[Function]}
                                        tabIndex={-1}
                                        variant="default"
                                      >
                                        <Chip
                                          className="MultiPicker-pickerChip"
                                          classes={
                                            Object {
                                              "avatar": "MuiChip-avatar",
                                              "avatarChildren": "MuiChip-avatarChildren",
                                              "avatarColorPrimary": "MuiChip-avatarColorPrimary",
                                              "avatarColorSecondary": "MuiChip-avatarColorSecondary",
                                              "clickable": "MuiChip-clickable",
                                              "clickableColorPrimary": "MuiChip-clickableColorPrimary",
                                              "clickableColorSecondary": "MuiChip-clickableColorSecondary",
                                              "colorPrimary": "MuiChip-colorPrimary",
                                              "colorSecondary": "MuiChip-colorSecondary",
                                              "deletable": "MuiChip-deletable",
                                              "deletableColorPrimary": "MuiChip-deletableColorPrimary",
                                              "deletableColorSecondary": "MuiChip-deletableColorSecondary",
                                              "deleteIcon": "MuiChip-deleteIcon",
                                              "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
                                              "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
                                              "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
                                              "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
                                              "icon": "MuiChip-icon",
                                              "iconColorPrimary": "MuiChip-iconColorPrimary",
                                              "iconColorSecondary": "MuiChip-iconColorSecondary",
                                              "label": "MuiChip-label",
                                              "outlined": "MuiChip-outlined",
                                              "outlinedPrimary": "MuiChip-outlinedPrimary",
                                              "outlinedSecondary": "MuiChip-outlinedSecondary",
                                              "root": "MuiChip-root",
                                            }
                                          }
                                          color="secondary"
                                          component="div"
                                          label="some-item"
                                          onDelete={[Function]}
                                          tabIndex={-1}
                                          variant="default"
                                        >
                                          <div
                                            className="MuiChip-root MuiChip-colorSecondary MuiChip-deletable MuiChip-deletableColorSecondary MultiPicker-pickerChip"
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            tabIndex={-1}
                                          >
                                            <span
                                              className="MuiChip-label"
                                            >
                                              some-item
                                            </span>
                                            <pure(Cancel)
                                              className="MuiChip-deleteIcon MuiChip-deleteIconColorSecondary"
                                              onClick={[Function]}
                                            >
                                              <Cancel
                                                className="MuiChip-deleteIcon MuiChip-deleteIconColorSecondary"
                                                onClick={[Function]}
                                              >
                                                <WithStyles(SvgIcon)
                                                  className="MuiChip-deleteIcon MuiChip-deleteIconColorSecondary"
                                                  onClick={[Function]}
                                                >
                                                  <SvgIcon
                                                    className="MuiChip-deleteIcon MuiChip-deleteIconColorSecondary"
                                                    classes={
                                                      Object {
                                                        "colorAction": "MuiSvgIcon-colorAction",
                                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                        "colorError": "MuiSvgIcon-colorError",
                                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                        "root": "MuiSvgIcon-root",
                                                      }
                                                    }
                                                    color="inherit"
                                                    component="svg"
                                                    fontSize="default"
                                                    onClick={[Function]}
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <svg
                                                      aria-hidden="true"
                                                      className="MuiSvgIcon-root MuiChip-deleteIcon MuiChip-deleteIconColorSecondary"
                                                      focusable="false"
                                                      onClick={[Function]}
                                                      role="presentation"
                                                      viewBox="0 0 24 24"
                                                    >
                                                      <path
                                                        d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
                                                      />
                                                    </svg>
                                                  </SvgIcon>
                                                </WithStyles(SvgIcon)>
                                              </Cancel>
                                            </pure(Cancel)>
                                          </div>
                                        </Chip>
                                      </WithStyles(Chip)>
                                    </ChipWithPopover>
                                  </PickerChips>
                                  <input
                                    aria-activedescendant={null}
                                    aria-autocomplete="list"
                                    aria-controls={null}
                                    aria-invalid={false}
                                    aria-labelledby="downshift-0-label"
                                    autoComplete="off"
                                    className="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                                    disabled={false}
                                    id="downshift-0-input"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    required={false}
                                    type="text"
                                    value=""
                                  />
                                </div>
                              </InputBase>
                            </WithFormControlContext(InputBase)>
                          </WithStyles(WithFormControlContext(InputBase))>
                        </Input>
                      </WithStyles(Input)>
                    </div>
                  </FormControl>
                </WithStyles(FormControl)>
              </TextField>
            </PickerInput>
          </WithStyles(PickerInput)>
          <DebouncedContainer
            anchorElement={null}
            clearItems={[Function]}
            clearSelection={[Function]}
            closeMenu={[Function]}
            getItemProps={[Function]}
            getLabelProps={[Function]}
            getMenuProps={[Function]}
            getRootProps={[Function]}
            getToggleButtonProps={[Function]}
            highlightedIndex={null}
            id="downshift-0"
            inputValue=""
            isOpen={false}
            itemToString={[Function]}
            openMenu={[Function]}
            reset={[Function]}
            selectHighlightedItem={[Function]}
            selectItem={[Function]}
            selectItemAtIndex={[Function]}
            selectedItem={null}
            setHighlightedIndex={[Function]}
            setItemCount={[Function]}
            setState={[Function]}
            toggleMenu={[Function]}
            unsetItemCount={[Function]}
          >
            <PickerDropdown
              anchorElement={null}
              clearItems={[Function]}
              clearSelection={[Function]}
              closeMenu={[Function]}
              getItemProps={[Function]}
              getLabelProps={[Function]}
              getMenuProps={[Function]}
              getRootProps={[Function]}
              getToggleButtonProps={[Function]}
              highlightedIndex={null}
              id="downshift-0"
              inputValue=""
              isOpen={false}
              itemToString={[Function]}
              openMenu={[Function]}
              reset={[Function]}
              selectHighlightedItem={[Function]}
              selectItem={[Function]}
              selectItemAtIndex={[Function]}
              selectedItem={null}
              setHighlightedIndex={[Function]}
              setItemCount={[Function]}
              setState={[Function]}
              toggleMenu={[Function]}
              unsetItemCount={[Function]}
            />
          </DebouncedContainer>
        </div>
      </Downshift>
    </MultiPicker>
  </WithStyles(MultiPicker)>
</JssProvider>
`;

exports[`MultiPicker component renders custom chip labels 1`] = `
<JssProvider
  generateClassName={[Function]}
>
  <WithStyles(MultiPicker)
    getSuggestedItems={[Function]}
    itemToLabel={
      [MockFunction] {
        "calls": Array [
          Array [
            "some-item",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": "some label",
          },
        ],
      }
    }
    itemToString={[Function]}
    onChange={[Function]}
    value={
      Array [
        "some-item",
      ]
    }
  >
    <MultiPicker
      classes={
        Object {
          "pickerChip": "MultiPicker-pickerChip",
        }
      }
      getSuggestedItems={[Function]}
      itemToLabel={
        [MockFunction] {
          "calls": Array [
            Array [
              "some-item",
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": "some label",
            },
          ],
        }
      }
      itemToString={[Function]}
      onChange={[Function]}
      value={
        Array [
          "some-item",
        ]
      }
    >
      <Downshift
        defaultHighlightedIndex={null}
        defaultIsOpen={false}
        environment={[Window]}
        fullWidth={true}
        getA11yStatusMessage={[Function]}
        inputValue=""
        itemToString={[Function]}
        onChange={[Function]}
        onInputValueChange={[Function]}
        onOuterClick={[Function]}
        onSelect={[Function]}
        onStateChange={[Function]}
        onUserAction={[Function]}
        scrollIntoView={[Function]}
        selectedItemChanged={[Function]}
        stateReducer={[Function]}
        suppressRefError={false}
      >
        <div
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="downshift-0-label"
          aria-owns={null}
          role="combobox"
          style={
            Object {
              "position": "relative",
            }
          }
        >
          <WithStyles(PickerInput)
            aria-activedescendant={null}
            aria-autocomplete="list"
            aria-controls={null}
            aria-labelledby="downshift-0-label"
            autoComplete="off"
            id="downshift-0-input"
            inputRef={
              Object {
                "current": <input
                  aria-autocomplete="list"
                  aria-invalid="false"
                  aria-labelledby="downshift-0-label"
                  autocomplete="off"
                  class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                  id="downshift-0-input"
                  type="text"
                  value=""
                />,
              }
            }
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            startAdornment={
              <PickerChips
                classes={
                  Object {
                    "pickerChip": "MultiPicker-pickerChip",
                  }
                }
                itemToLabel={
                  [MockFunction] {
                    "calls": Array [
                      Array [
                        "some-item",
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": "some label",
                      },
                    ],
                  }
                }
                itemToString={[Function]}
                onDelete={[Function]}
                selectedItems={
                  Array [
                    "some-item",
                  ]
                }
              />
            }
            value=""
          >
            <PickerInput
              aria-activedescendant={null}
              aria-autocomplete="list"
              aria-controls={null}
              aria-labelledby="downshift-0-label"
              autoComplete="off"
              classes={
                Object {
                  "InputLabelFilled": "PickerInput-InputLabelFilled",
                  "InputLabelRoot": "PickerInput-InputLabelRoot",
                  "InputLabelShrink": "PickerInput-InputLabelShrink",
                  "InputRoot": "PickerInput-InputRoot",
                  "inputRoot": "PickerInput-inputRoot",
                }
              }
              fullWidth={false}
              id="downshift-0-input"
              inputRef={
                Object {
                  "current": <input
                    aria-autocomplete="list"
                    aria-invalid="false"
                    aria-labelledby="downshift-0-label"
                    autocomplete="off"
                    class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                    id="downshift-0-input"
                    type="text"
                    value=""
                  />,
                }
              }
              label=""
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              startAdornment={
                <PickerChips
                  classes={
                    Object {
                      "pickerChip": "MultiPicker-pickerChip",
                    }
                  }
                  itemToLabel={
                    [MockFunction] {
                      "calls": Array [
                        Array [
                          "some-item",
                        ],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": "some label",
                        },
                      ],
                    }
                  }
                  itemToString={[Function]}
                  onDelete={[Function]}
                  selectedItems={
                    Array [
                      "some-item",
                    ]
                  }
                />
              }
              value=""
            >
              <TextField
                InputLabelProps={
                  Object {
                    "classes": Object {
                      "filled": "PickerInput-InputLabelFilled",
                      "root": "PickerInput-InputLabelRoot",
                      "shrink": "PickerInput-InputLabelShrink",
                    },
                    "shrink": true,
                  }
                }
                InputProps={
                  Object {
                    "classes": Object {
                      "root": "PickerInput-InputRoot",
                    },
                    "inputProps": Object {
                      "aria-activedescendant": null,
                      "aria-autocomplete": "list",
                      "aria-controls": null,
                      "aria-labelledby": "downshift-0-label",
                      "autoComplete": "off",
                      "className": "PickerInput-inputRoot",
                      "id": "downshift-0-input",
                      "onDragStart": undefined,
                      "style": undefined,
                    },
                    "inputRef": Object {
                      "current": <input
                        aria-autocomplete="list"
                        aria-invalid="false"
                        aria-labelledby="downshift-0-label"
                        autocomplete="off"
                        class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                        id="downshift-0-input"
                        type="text"
                        value=""
                      />,
                    },
                    "startAdornment": <PickerChips
                      classes={
                        Object {
                          "pickerChip": "MultiPicker-pickerChip",
                        }
                      }
                      itemToLabel={
                        [MockFunction] {
                          "calls": Array [
                            Array [
                              "some-item",
                            ],
                          ],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": "some label",
                            },
                          ],
                        }
                      }
                      itemToString={[Function]}
                      onDelete={[Function]}
                      selectedItems={
                        Array [
                          "some-item",
                        ]
                      }
                    />,
                    "style": undefined,
                  }
                }
                fullWidth={false}
                label=""
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                required={false}
                select={false}
                value=""
                variant="standard"
              >
                <WithStyles(FormControl)
                  fullWidth={false}
                  onKeyDown={[Function]}
                  required={false}
                  variant="standard"
                >
                  <FormControl
                    classes={
                      Object {
                        "fullWidth": "MuiFormControl-fullWidth",
                        "marginDense": "MuiFormControl-marginDense",
                        "marginNormal": "MuiFormControl-marginNormal",
                        "root": "MuiFormControl-root",
                      }
                    }
                    component="div"
                    disabled={false}
                    error={false}
                    fullWidth={false}
                    margin="none"
                    onKeyDown={[Function]}
                    required={false}
                    variant="standard"
                  >
                    <div
                      className="MuiFormControl-root"
                      onKeyDown={[Function]}
                    >
                      <WithStyles(Input)
                        classes={
                          Object {
                            "root": "PickerInput-InputRoot",
                          }
                        }
                        fullWidth={false}
                        inputProps={
                          Object {
                            "aria-activedescendant": null,
                            "aria-autocomplete": "list",
                            "aria-controls": null,
                            "aria-labelledby": "downshift-0-label",
                            "autoComplete": "off",
                            "className": "PickerInput-inputRoot",
                            "id": "downshift-0-input",
                            "onDragStart": undefined,
                            "style": undefined,
                          }
                        }
                        inputRef={
                          Object {
                            "current": <input
                              aria-autocomplete="list"
                              aria-invalid="false"
                              aria-labelledby="downshift-0-label"
                              autocomplete="off"
                              class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                              id="downshift-0-input"
                              type="text"
                              value=""
                            />,
                          }
                        }
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        startAdornment={
                          <PickerChips
                            classes={
                              Object {
                                "pickerChip": "MultiPicker-pickerChip",
                              }
                            }
                            itemToLabel={
                              [MockFunction] {
                                "calls": Array [
                                  Array [
                                    "some-item",
                                  ],
                                ],
                                "results": Array [
                                  Object {
                                    "type": "return",
                                    "value": "some label",
                                  },
                                ],
                              }
                            }
                            itemToString={[Function]}
                            onDelete={[Function]}
                            selectedItems={
                              Array [
                                "some-item",
                              ]
                            }
                          />
                        }
                        value=""
                      >
                        <Input
                          classes={
                            Object {
                              "disabled": "MuiInput-disabled",
                              "error": "MuiInput-error",
                              "focused": "MuiInput-focused",
                              "formControl": "MuiInput-formControl",
                              "fullWidth": "MuiInput-fullWidth",
                              "input": "MuiInput-input",
                              "inputMarginDense": "MuiInput-inputMarginDense",
                              "inputMultiline": "MuiInput-inputMultiline",
                              "inputType": "MuiInput-inputType",
                              "inputTypeSearch": "MuiInput-inputTypeSearch",
                              "multiline": "MuiInput-multiline",
                              "root": "MuiInput-root PickerInput-InputRoot",
                              "underline": "MuiInput-underline",
                            }
                          }
                          fullWidth={false}
                          inputProps={
                            Object {
                              "aria-activedescendant": null,
                              "aria-autocomplete": "list",
                              "aria-controls": null,
                              "aria-labelledby": "downshift-0-label",
                              "autoComplete": "off",
                              "className": "PickerInput-inputRoot",
                              "id": "downshift-0-input",
                              "onDragStart": undefined,
                              "style": undefined,
                            }
                          }
                          inputRef={
                            Object {
                              "current": <input
                                aria-autocomplete="list"
                                aria-invalid="false"
                                aria-labelledby="downshift-0-label"
                                autocomplete="off"
                                class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                                id="downshift-0-input"
                                type="text"
                                value=""
                              />,
                            }
                          }
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          startAdornment={
                            <PickerChips
                              classes={
                                Object {
                                  "pickerChip": "MultiPicker-pickerChip",
                                }
                              }
                              itemToLabel={
                                [MockFunction] {
                                  "calls": Array [
                                    Array [
                                      "some-item",
                                    ],
                                  ],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": "some label",
                                    },
                                  ],
                                }
                              }
                              itemToString={[Function]}
                              onDelete={[Function]}
                              selectedItems={
                                Array [
                                  "some-item",
                                ]
                              }
                            />
                          }
                          value=""
                        >
                          <WithStyles(WithFormControlContext(InputBase))
                            classes={
                              Object {
                                "disabled": "MuiInput-disabled",
                                "error": "MuiInput-error",
                                "focused": "MuiInput-focused",
                                "formControl": "MuiInput-formControl",
                                "fullWidth": "MuiInput-fullWidth",
                                "input": "MuiInput-input",
                                "inputMarginDense": "MuiInput-inputMarginDense",
                                "inputMultiline": "MuiInput-inputMultiline",
                                "inputType": "MuiInput-inputType",
                                "inputTypeSearch": "MuiInput-inputTypeSearch",
                                "multiline": "MuiInput-multiline",
                                "root": "MuiInput-root PickerInput-InputRoot MuiInput-underline",
                                "underline": null,
                              }
                            }
                            fullWidth={false}
                            inputComponent="input"
                            inputProps={
                              Object {
                                "aria-activedescendant": null,
                                "aria-autocomplete": "list",
                                "aria-controls": null,
                                "aria-labelledby": "downshift-0-label",
                                "autoComplete": "off",
                                "className": "PickerInput-inputRoot",
                                "id": "downshift-0-input",
                                "onDragStart": undefined,
                                "style": undefined,
                              }
                            }
                            inputRef={
                              Object {
                                "current": <input
                                  aria-autocomplete="list"
                                  aria-invalid="false"
                                  aria-labelledby="downshift-0-label"
                                  autocomplete="off"
                                  class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                                  id="downshift-0-input"
                                  type="text"
                                  value=""
                                />,
                              }
                            }
                            multiline={false}
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            startAdornment={
                              <PickerChips
                                classes={
                                  Object {
                                    "pickerChip": "MultiPicker-pickerChip",
                                  }
                                }
                                itemToLabel={
                                  [MockFunction] {
                                    "calls": Array [
                                      Array [
                                        "some-item",
                                      ],
                                    ],
                                    "results": Array [
                                      Object {
                                        "type": "return",
                                        "value": "some label",
                                      },
                                    ],
                                  }
                                }
                                itemToString={[Function]}
                                onDelete={[Function]}
                                selectedItems={
                                  Array [
                                    "some-item",
                                  ]
                                }
                              />
                            }
                            type="text"
                            value=""
                          >
                            <WithFormControlContext(InputBase)
                              classes={
                                Object {
                                  "adornedEnd": "MuiInputBase-adornedEnd",
                                  "adornedStart": "MuiInputBase-adornedStart",
                                  "disabled": "MuiInputBase-disabled MuiInput-disabled",
                                  "error": "MuiInputBase-error MuiInput-error",
                                  "focused": "MuiInputBase-focused MuiInput-focused",
                                  "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                  "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                  "input": "MuiInputBase-input MuiInput-input",
                                  "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                  "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                  "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                  "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                  "inputType": "MuiInputBase-inputType MuiInput-inputType",
                                  "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                  "marginDense": "MuiInputBase-marginDense",
                                  "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                  "root": "MuiInputBase-root MuiInput-root PickerInput-InputRoot MuiInput-underline",
                                }
                              }
                              fullWidth={false}
                              inputComponent="input"
                              inputProps={
                                Object {
                                  "aria-activedescendant": null,
                                  "aria-autocomplete": "list",
                                  "aria-controls": null,
                                  "aria-labelledby": "downshift-0-label",
                                  "autoComplete": "off",
                                  "className": "PickerInput-inputRoot",
                                  "id": "downshift-0-input",
                                  "onDragStart": undefined,
                                  "style": undefined,
                                }
                              }
                              inputRef={
                                Object {
                                  "current": <input
                                    aria-autocomplete="list"
                                    aria-invalid="false"
                                    aria-labelledby="downshift-0-label"
                                    autocomplete="off"
                                    class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                                    id="downshift-0-input"
                                    type="text"
                                    value=""
                                  />,
                                }
                              }
                              multiline={false}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              startAdornment={
                                <PickerChips
                                  classes={
                                    Object {
                                      "pickerChip": "MultiPicker-pickerChip",
                                    }
                                  }
                                  itemToLabel={
                                    [MockFunction] {
                                      "calls": Array [
                                        Array [
                                          "some-item",
                                        ],
                                      ],
                                      "results": Array [
                                        Object {
                                          "type": "return",
                                          "value": "some label",
                                        },
                                      ],
                                    }
                                  }
                                  itemToString={[Function]}
                                  onDelete={[Function]}
                                  selectedItems={
                                    Array [
                                      "some-item",
                                    ]
                                  }
                                />
                              }
                              type="text"
                              value=""
                            >
                              <InputBase
                                classes={
                                  Object {
                                    "adornedEnd": "MuiInputBase-adornedEnd",
                                    "adornedStart": "MuiInputBase-adornedStart",
                                    "disabled": "MuiInputBase-disabled MuiInput-disabled",
                                    "error": "MuiInputBase-error MuiInput-error",
                                    "focused": "MuiInputBase-focused MuiInput-focused",
                                    "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                    "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                    "input": "MuiInputBase-input MuiInput-input",
                                    "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                    "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                    "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                    "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                    "inputType": "MuiInputBase-inputType MuiInput-inputType",
                                    "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                    "marginDense": "MuiInputBase-marginDense",
                                    "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                    "root": "MuiInputBase-root MuiInput-root PickerInput-InputRoot MuiInput-underline",
                                  }
                                }
                                fullWidth={false}
                                inputComponent="input"
                                inputProps={
                                  Object {
                                    "aria-activedescendant": null,
                                    "aria-autocomplete": "list",
                                    "aria-controls": null,
                                    "aria-labelledby": "downshift-0-label",
                                    "autoComplete": "off",
                                    "className": "PickerInput-inputRoot",
                                    "id": "downshift-0-input",
                                    "onDragStart": undefined,
                                    "style": undefined,
                                  }
                                }
                                inputRef={
                                  Object {
                                    "current": <input
                                      aria-autocomplete="list"
                                      aria-invalid="false"
                                      aria-labelledby="downshift-0-label"
                                      autocomplete="off"
                                      class="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                                      id="downshift-0-input"
                                      type="text"
                                      value=""
                                    />,
                                  }
                                }
                                muiFormControl={
                                  Object {
                                    "adornedStart": true,
                                    "disabled": false,
                                    "error": false,
                                    "filled": false,
                                    "focused": false,
                                    "margin": "none",
                                    "onBlur": [Function],
                                    "onEmpty": [Function],
                                    "onFilled": [Function],
                                    "onFocus": [Function],
                                    "required": false,
                                    "variant": "standard",
                                  }
                                }
                                multiline={false}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                startAdornment={
                                  <PickerChips
                                    classes={
                                      Object {
                                        "pickerChip": "MultiPicker-pickerChip",
                                      }
                                    }
                                    itemToLabel={
                                      [MockFunction] {
                                        "calls": Array [
                                          Array [
                                            "some-item",
                                          ],
                                        ],
                                        "results": Array [
                                          Object {
                                            "type": "return",
                                            "value": "some label",
                                          },
                                        ],
                                      }
                                    }
                                    itemToString={[Function]}
                                    onDelete={[Function]}
                                    selectedItems={
                                      Array [
                                        "some-item",
                                      ]
                                    }
                                  />
                                }
                                type="text"
                                value=""
                              >
                                <div
                                  className="MuiInputBase-root MuiInput-root PickerInput-InputRoot MuiInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedStart"
                                  onClick={[Function]}
                                >
                                  <PickerChips
                                    classes={
                                      Object {
                                        "pickerChip": "MultiPicker-pickerChip",
                                      }
                                    }
                                    itemToLabel={
                                      [MockFunction] {
                                        "calls": Array [
                                          Array [
                                            "some-item",
                                          ],
                                        ],
                                        "results": Array [
                                          Object {
                                            "type": "return",
                                            "value": "some label",
                                          },
                                        ],
                                      }
                                    }
                                    itemToString={[Function]}
                                    key="picker-chips"
                                    onDelete={[Function]}
                                    selectedItems={
                                      Array [
                                        "some-item",
                                      ]
                                    }
                                  >
                                    <ChipWithPopover
                                      className="MultiPicker-pickerChip"
                                      key="some-item"
                                      label="some label"
                                      onDelete={[Function]}
                                      tabIndex={-1}
                                      variant="default"
                                    >
                                      <WithStyles(Chip)
                                        className="MultiPicker-pickerChip"
                                        label="some label"
                                        onDelete={[Function]}
                                        tabIndex={-1}
                                        variant="default"
                                      >
                                        <Chip
                                          className="MultiPicker-pickerChip"
                                          classes={
                                            Object {
                                              "avatar": "MuiChip-avatar",
                                              "avatarChildren": "MuiChip-avatarChildren",
                                              "avatarColorPrimary": "MuiChip-avatarColorPrimary",
                                              "avatarColorSecondary": "MuiChip-avatarColorSecondary",
                                              "clickable": "MuiChip-clickable",
                                              "clickableColorPrimary": "MuiChip-clickableColorPrimary",
                                              "clickableColorSecondary": "MuiChip-clickableColorSecondary",
                                              "colorPrimary": "MuiChip-colorPrimary",
                                              "colorSecondary": "MuiChip-colorSecondary",
                                              "deletable": "MuiChip-deletable",
                                              "deletableColorPrimary": "MuiChip-deletableColorPrimary",
                                              "deletableColorSecondary": "MuiChip-deletableColorSecondary",
                                              "deleteIcon": "MuiChip-deleteIcon",
                                              "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
                                              "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
                                              "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
                                              "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
                                              "icon": "MuiChip-icon",
                                              "iconColorPrimary": "MuiChip-iconColorPrimary",
                                              "iconColorSecondary": "MuiChip-iconColorSecondary",
                                              "label": "MuiChip-label",
                                              "outlined": "MuiChip-outlined",
                                              "outlinedPrimary": "MuiChip-outlinedPrimary",
                                              "outlinedSecondary": "MuiChip-outlinedSecondary",
                                              "root": "MuiChip-root",
                                            }
                                          }
                                          color="default"
                                          component="div"
                                          label="some label"
                                          onDelete={[Function]}
                                          tabIndex={-1}
                                          variant="default"
                                        >
                                          <div
                                            className="MuiChip-root MuiChip-deletable MultiPicker-pickerChip"
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            tabIndex={-1}
                                          >
                                            <span
                                              className="MuiChip-label"
                                            >
                                              some label
                                            </span>
                                            <pure(Cancel)
                                              className="MuiChip-deleteIcon"
                                              onClick={[Function]}
                                            >
                                              <Cancel
                                                className="MuiChip-deleteIcon"
                                                onClick={[Function]}
                                              >
                                                <WithStyles(SvgIcon)
                                                  className="MuiChip-deleteIcon"
                                                  onClick={[Function]}
                                                >
                                                  <SvgIcon
                                                    className="MuiChip-deleteIcon"
                                                    classes={
                                                      Object {
                                                        "colorAction": "MuiSvgIcon-colorAction",
                                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                        "colorError": "MuiSvgIcon-colorError",
                                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                        "root": "MuiSvgIcon-root",
                                                      }
                                                    }
                                                    color="inherit"
                                                    component="svg"
                                                    fontSize="default"
                                                    onClick={[Function]}
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <svg
                                                      aria-hidden="true"
                                                      className="MuiSvgIcon-root MuiChip-deleteIcon"
                                                      focusable="false"
                                                      onClick={[Function]}
                                                      role="presentation"
                                                      viewBox="0 0 24 24"
                                                    >
                                                      <path
                                                        d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
                                                      />
                                                    </svg>
                                                  </SvgIcon>
                                                </WithStyles(SvgIcon)>
                                              </Cancel>
                                            </pure(Cancel)>
                                          </div>
                                        </Chip>
                                      </WithStyles(Chip)>
                                    </ChipWithPopover>
                                  </PickerChips>
                                  <input
                                    aria-activedescendant={null}
                                    aria-autocomplete="list"
                                    aria-controls={null}
                                    aria-invalid={false}
                                    aria-labelledby="downshift-0-label"
                                    autoComplete="off"
                                    className="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedStart PickerInput-inputRoot"
                                    disabled={false}
                                    id="downshift-0-input"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    required={false}
                                    type="text"
                                    value=""
                                  />
                                </div>
                              </InputBase>
                            </WithFormControlContext(InputBase)>
                          </WithStyles(WithFormControlContext(InputBase))>
                        </Input>
                      </WithStyles(Input)>
                    </div>
                  </FormControl>
                </WithStyles(FormControl)>
              </TextField>
            </PickerInput>
          </WithStyles(PickerInput)>
          <DebouncedContainer
            anchorElement={null}
            clearItems={[Function]}
            clearSelection={[Function]}
            closeMenu={[Function]}
            getItemProps={[Function]}
            getLabelProps={[Function]}
            getMenuProps={[Function]}
            getRootProps={[Function]}
            getToggleButtonProps={[Function]}
            highlightedIndex={null}
            id="downshift-0"
            inputValue=""
            isOpen={false}
            itemToString={[Function]}
            openMenu={[Function]}
            reset={[Function]}
            selectHighlightedItem={[Function]}
            selectItem={[Function]}
            selectItemAtIndex={[Function]}
            selectedItem={null}
            setHighlightedIndex={[Function]}
            setItemCount={[Function]}
            setState={[Function]}
            toggleMenu={[Function]}
            unsetItemCount={[Function]}
          >
            <PickerDropdown
              anchorElement={null}
              clearItems={[Function]}
              clearSelection={[Function]}
              closeMenu={[Function]}
              getItemProps={[Function]}
              getLabelProps={[Function]}
              getMenuProps={[Function]}
              getRootProps={[Function]}
              getToggleButtonProps={[Function]}
              highlightedIndex={null}
              id="downshift-0"
              inputValue=""
              isOpen={false}
              itemToString={[Function]}
              openMenu={[Function]}
              reset={[Function]}
              selectHighlightedItem={[Function]}
              selectItem={[Function]}
              selectItemAtIndex={[Function]}
              selectedItem={null}
              setHighlightedIndex={[Function]}
              setItemCount={[Function]}
              setState={[Function]}
              toggleMenu={[Function]}
              unsetItemCount={[Function]}
            />
          </DebouncedContainer>
        </div>
      </Downshift>
    </MultiPicker>
  </WithStyles(MultiPicker)>
</JssProvider>
`;

exports[`MultiPicker component renders custom suggestion components 1`] = `
<JssProvider
  generateClassName={[Function]}
>
  <WithStyles(MultiPicker)
    SuggestionComponent={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "inputValue": "some text",
              "isHighlighted": false,
              "item": "some suggestion",
              "itemId": "some suggestion",
            },
            Object {},
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": <span>
              Some Custom Suggestion
            </span>,
          },
        ],
      }
    }
    getSuggestedItems={[Function]}
    itemToString={[Function]}
    onChange={[Function]}
    value={Array []}
  >
    <MultiPicker
      SuggestionComponent={
        [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "inputValue": "some text",
                "isHighlighted": false,
                "item": "some suggestion",
                "itemId": "some suggestion",
              },
              Object {},
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": <span>
                Some Custom Suggestion
              </span>,
            },
          ],
        }
      }
      classes={
        Object {
          "pickerChip": "MultiPicker-pickerChip",
        }
      }
      getSuggestedItems={[Function]}
      itemToString={[Function]}
      onChange={[Function]}
      value={Array []}
    >
      <Downshift
        defaultHighlightedIndex={null}
        defaultIsOpen={false}
        environment={[Window]}
        fullWidth={true}
        getA11yStatusMessage={[Function]}
        inputValue="some text"
        itemToString={[Function]}
        onChange={[Function]}
        onInputValueChange={[Function]}
        onOuterClick={[Function]}
        onSelect={[Function]}
        onStateChange={[Function]}
        onUserAction={[Function]}
        scrollIntoView={[Function]}
        selectedItemChanged={[Function]}
        stateReducer={[Function]}
        suppressRefError={false}
      >
        <div
          aria-expanded={true}
          aria-haspopup="listbox"
          aria-labelledby="downshift-0-label"
          aria-owns="downshift-0-menu"
          role="combobox"
          style={
            Object {
              "position": "relative",
            }
          }
        >
          <WithStyles(PickerInput)
            aria-activedescendant={null}
            aria-autocomplete="list"
            aria-controls="downshift-0-menu"
            aria-labelledby="downshift-0-label"
            autoComplete="off"
            id="downshift-0-input"
            inputRef={
              Object {
                "current": <input
                  aria-autocomplete="list"
                  aria-controls="downshift-0-menu"
                  aria-invalid="false"
                  aria-labelledby="downshift-0-label"
                  autocomplete="off"
                  class="MuiInputBase-input MuiInput-input PickerInput-inputRoot"
                  id="downshift-0-input"
                  type="text"
                  value="some text"
                />,
              }
            }
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            startAdornment={false}
            value="some text"
          >
            <PickerInput
              aria-activedescendant={null}
              aria-autocomplete="list"
              aria-controls="downshift-0-menu"
              aria-labelledby="downshift-0-label"
              autoComplete="off"
              classes={
                Object {
                  "InputLabelFilled": "PickerInput-InputLabelFilled",
                  "InputLabelRoot": "PickerInput-InputLabelRoot",
                  "InputLabelShrink": "PickerInput-InputLabelShrink",
                  "InputRoot": "PickerInput-InputRoot",
                  "inputRoot": "PickerInput-inputRoot",
                }
              }
              fullWidth={false}
              id="downshift-0-input"
              inputRef={
                Object {
                  "current": <input
                    aria-autocomplete="list"
                    aria-controls="downshift-0-menu"
                    aria-invalid="false"
                    aria-labelledby="downshift-0-label"
                    autocomplete="off"
                    class="MuiInputBase-input MuiInput-input PickerInput-inputRoot"
                    id="downshift-0-input"
                    type="text"
                    value="some text"
                  />,
                }
              }
              label=""
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              startAdornment={false}
              value="some text"
            >
              <TextField
                InputLabelProps={
                  Object {
                    "classes": Object {
                      "filled": "PickerInput-InputLabelFilled",
                      "root": "PickerInput-InputLabelRoot",
                      "shrink": "PickerInput-InputLabelShrink",
                    },
                    "shrink": true,
                  }
                }
                InputProps={
                  Object {
                    "classes": Object {
                      "root": "PickerInput-InputRoot",
                    },
                    "inputProps": Object {
                      "aria-activedescendant": null,
                      "aria-autocomplete": "list",
                      "aria-controls": "downshift-0-menu",
                      "aria-labelledby": "downshift-0-label",
                      "autoComplete": "off",
                      "className": "PickerInput-inputRoot",
                      "id": "downshift-0-input",
                      "onDragStart": undefined,
                      "style": undefined,
                    },
                    "inputRef": Object {
                      "current": <input
                        aria-autocomplete="list"
                        aria-controls="downshift-0-menu"
                        aria-invalid="false"
                        aria-labelledby="downshift-0-label"
                        autocomplete="off"
                        class="MuiInputBase-input MuiInput-input PickerInput-inputRoot"
                        id="downshift-0-input"
                        type="text"
                        value="some text"
                      />,
                    },
                    "startAdornment": false,
                    "style": undefined,
                  }
                }
                fullWidth={false}
                label=""
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                required={false}
                select={false}
                value="some text"
                variant="standard"
              >
                <WithStyles(FormControl)
                  fullWidth={false}
                  onKeyDown={[Function]}
                  required={false}
                  variant="standard"
                >
                  <FormControl
                    classes={
                      Object {
                        "fullWidth": "MuiFormControl-fullWidth",
                        "marginDense": "MuiFormControl-marginDense",
                        "marginNormal": "MuiFormControl-marginNormal",
                        "root": "MuiFormControl-root",
                      }
                    }
                    component="div"
                    disabled={false}
                    error={false}
                    fullWidth={false}
                    margin="none"
                    onKeyDown={[Function]}
                    required={false}
                    variant="standard"
                  >
                    <div
                      className="MuiFormControl-root"
                      onKeyDown={[Function]}
                    >
                      <WithStyles(Input)
                        classes={
                          Object {
                            "root": "PickerInput-InputRoot",
                          }
                        }
                        fullWidth={false}
                        inputProps={
                          Object {
                            "aria-activedescendant": null,
                            "aria-autocomplete": "list",
                            "aria-controls": "downshift-0-menu",
                            "aria-labelledby": "downshift-0-label",
                            "autoComplete": "off",
                            "className": "PickerInput-inputRoot",
                            "id": "downshift-0-input",
                            "onDragStart": undefined,
                            "style": undefined,
                          }
                        }
                        inputRef={
                          Object {
                            "current": <input
                              aria-autocomplete="list"
                              aria-controls="downshift-0-menu"
                              aria-invalid="false"
                              aria-labelledby="downshift-0-label"
                              autocomplete="off"
                              class="MuiInputBase-input MuiInput-input PickerInput-inputRoot"
                              id="downshift-0-input"
                              type="text"
                              value="some text"
                            />,
                          }
                        }
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        startAdornment={false}
                        value="some text"
                      >
                        <Input
                          classes={
                            Object {
                              "disabled": "MuiInput-disabled",
                              "error": "MuiInput-error",
                              "focused": "MuiInput-focused",
                              "formControl": "MuiInput-formControl",
                              "fullWidth": "MuiInput-fullWidth",
                              "input": "MuiInput-input",
                              "inputMarginDense": "MuiInput-inputMarginDense",
                              "inputMultiline": "MuiInput-inputMultiline",
                              "inputType": "MuiInput-inputType",
                              "inputTypeSearch": "MuiInput-inputTypeSearch",
                              "multiline": "MuiInput-multiline",
                              "root": "MuiInput-root PickerInput-InputRoot",
                              "underline": "MuiInput-underline",
                            }
                          }
                          fullWidth={false}
                          inputProps={
                            Object {
                              "aria-activedescendant": null,
                              "aria-autocomplete": "list",
                              "aria-controls": "downshift-0-menu",
                              "aria-labelledby": "downshift-0-label",
                              "autoComplete": "off",
                              "className": "PickerInput-inputRoot",
                              "id": "downshift-0-input",
                              "onDragStart": undefined,
                              "style": undefined,
                            }
                          }
                          inputRef={
                            Object {
                              "current": <input
                                aria-autocomplete="list"
                                aria-controls="downshift-0-menu"
                                aria-invalid="false"
                                aria-labelledby="downshift-0-label"
                                autocomplete="off"
                                class="MuiInputBase-input MuiInput-input PickerInput-inputRoot"
                                id="downshift-0-input"
                                type="text"
                                value="some text"
                              />,
                            }
                          }
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          startAdornment={false}
                          value="some text"
                        >
                          <WithStyles(WithFormControlContext(InputBase))
                            classes={
                              Object {
                                "disabled": "MuiInput-disabled",
                                "error": "MuiInput-error",
                                "focused": "MuiInput-focused",
                                "formControl": "MuiInput-formControl",
                                "fullWidth": "MuiInput-fullWidth",
                                "input": "MuiInput-input",
                                "inputMarginDense": "MuiInput-inputMarginDense",
                                "inputMultiline": "MuiInput-inputMultiline",
                                "inputType": "MuiInput-inputType",
                                "inputTypeSearch": "MuiInput-inputTypeSearch",
                                "multiline": "MuiInput-multiline",
                                "root": "MuiInput-root PickerInput-InputRoot MuiInput-underline",
                                "underline": null,
                              }
                            }
                            fullWidth={false}
                            inputComponent="input"
                            inputProps={
                              Object {
                                "aria-activedescendant": null,
                                "aria-autocomplete": "list",
                                "aria-controls": "downshift-0-menu",
                                "aria-labelledby": "downshift-0-label",
                                "autoComplete": "off",
                                "className": "PickerInput-inputRoot",
                                "id": "downshift-0-input",
                                "onDragStart": undefined,
                                "style": undefined,
                              }
                            }
                            inputRef={
                              Object {
                                "current": <input
                                  aria-autocomplete="list"
                                  aria-controls="downshift-0-menu"
                                  aria-invalid="false"
                                  aria-labelledby="downshift-0-label"
                                  autocomplete="off"
                                  class="MuiInputBase-input MuiInput-input PickerInput-inputRoot"
                                  id="downshift-0-input"
                                  type="text"
                                  value="some text"
                                />,
                              }
                            }
                            multiline={false}
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            startAdornment={false}
                            type="text"
                            value="some text"
                          >
                            <WithFormControlContext(InputBase)
                              classes={
                                Object {
                                  "adornedEnd": "MuiInputBase-adornedEnd",
                                  "adornedStart": "MuiInputBase-adornedStart",
                                  "disabled": "MuiInputBase-disabled MuiInput-disabled",
                                  "error": "MuiInputBase-error MuiInput-error",
                                  "focused": "MuiInputBase-focused MuiInput-focused",
                                  "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                  "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                  "input": "MuiInputBase-input MuiInput-input",
                                  "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                  "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                  "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                  "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                  "inputType": "MuiInputBase-inputType MuiInput-inputType",
                                  "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                  "marginDense": "MuiInputBase-marginDense",
                                  "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                  "root": "MuiInputBase-root MuiInput-root PickerInput-InputRoot MuiInput-underline",
                                }
                              }
                              fullWidth={false}
                              inputComponent="input"
                              inputProps={
                                Object {
                                  "aria-activedescendant": null,
                                  "aria-autocomplete": "list",
                                  "aria-controls": "downshift-0-menu",
                                  "aria-labelledby": "downshift-0-label",
                                  "autoComplete": "off",
                                  "className": "PickerInput-inputRoot",
                                  "id": "downshift-0-input",
                                  "onDragStart": undefined,
                                  "style": undefined,
                                }
                              }
                              inputRef={
                                Object {
                                  "current": <input
                                    aria-autocomplete="list"
                                    aria-controls="downshift-0-menu"
                                    aria-invalid="false"
                                    aria-labelledby="downshift-0-label"
                                    autocomplete="off"
                                    class="MuiInputBase-input MuiInput-input PickerInput-inputRoot"
                                    id="downshift-0-input"
                                    type="text"
                                    value="some text"
                                  />,
                                }
                              }
                              multiline={false}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              startAdornment={false}
                              type="text"
                              value="some text"
                            >
                              <InputBase
                                classes={
                                  Object {
                                    "adornedEnd": "MuiInputBase-adornedEnd",
                                    "adornedStart": "MuiInputBase-adornedStart",
                                    "disabled": "MuiInputBase-disabled MuiInput-disabled",
                                    "error": "MuiInputBase-error MuiInput-error",
                                    "focused": "MuiInputBase-focused MuiInput-focused",
                                    "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                    "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                    "input": "MuiInputBase-input MuiInput-input",
                                    "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                    "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                    "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                    "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                    "inputType": "MuiInputBase-inputType MuiInput-inputType",
                                    "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                    "marginDense": "MuiInputBase-marginDense",
                                    "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                    "root": "MuiInputBase-root MuiInput-root PickerInput-InputRoot MuiInput-underline",
                                  }
                                }
                                fullWidth={false}
                                inputComponent="input"
                                inputProps={
                                  Object {
                                    "aria-activedescendant": null,
                                    "aria-autocomplete": "list",
                                    "aria-controls": "downshift-0-menu",
                                    "aria-labelledby": "downshift-0-label",
                                    "autoComplete": "off",
                                    "className": "PickerInput-inputRoot",
                                    "id": "downshift-0-input",
                                    "onDragStart": undefined,
                                    "style": undefined,
                                  }
                                }
                                inputRef={
                                  Object {
                                    "current": <input
                                      aria-autocomplete="list"
                                      aria-controls="downshift-0-menu"
                                      aria-invalid="false"
                                      aria-labelledby="downshift-0-label"
                                      autocomplete="off"
                                      class="MuiInputBase-input MuiInput-input PickerInput-inputRoot"
                                      id="downshift-0-input"
                                      type="text"
                                      value="some text"
                                    />,
                                  }
                                }
                                muiFormControl={
                                  Object {
                                    "adornedStart": false,
                                    "disabled": false,
                                    "error": false,
                                    "filled": true,
                                    "focused": false,
                                    "margin": "none",
                                    "onBlur": [Function],
                                    "onEmpty": [Function],
                                    "onFilled": [Function],
                                    "onFocus": [Function],
                                    "required": false,
                                    "variant": "standard",
                                  }
                                }
                                multiline={false}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                startAdornment={false}
                                type="text"
                                value="some text"
                              >
                                <div
                                  className="MuiInputBase-root MuiInput-root PickerInput-InputRoot MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
                                  onClick={[Function]}
                                >
                                  <input
                                    aria-activedescendant={null}
                                    aria-autocomplete="list"
                                    aria-controls="downshift-0-menu"
                                    aria-invalid={false}
                                    aria-labelledby="downshift-0-label"
                                    autoComplete="off"
                                    className="MuiInputBase-input MuiInput-input PickerInput-inputRoot"
                                    disabled={false}
                                    id="downshift-0-input"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    required={false}
                                    type="text"
                                    value="some text"
                                  />
                                </div>
                              </InputBase>
                            </WithFormControlContext(InputBase)>
                          </WithStyles(WithFormControlContext(InputBase))>
                        </Input>
                      </WithStyles(Input)>
                    </div>
                  </FormControl>
                </WithStyles(FormControl)>
              </TextField>
            </PickerInput>
          </WithStyles(PickerInput)>
          <DebouncedContainer
            SuggestionComponent={
              [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "inputValue": "some text",
                      "isHighlighted": false,
                      "item": "some suggestion",
                      "itemId": "some suggestion",
                    },
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": <span>
                      Some Custom Suggestion
                    </span>,
                  },
                ],
              }
            }
            anchorElement={
              <input
                aria-autocomplete="list"
                aria-controls="downshift-0-menu"
                aria-invalid="false"
                aria-labelledby="downshift-0-label"
                autocomplete="off"
                class="MuiInputBase-input MuiInput-input PickerInput-inputRoot"
                id="downshift-0-input"
                type="text"
                value="some text"
              />
            }
            clearItems={[Function]}
            clearSelection={[Function]}
            closeMenu={[Function]}
            getItemProps={[Function]}
            getLabelProps={[Function]}
            getMenuProps={[Function]}
            getRootProps={[Function]}
            getToggleButtonProps={[Function]}
            highlightedIndex={null}
            id="downshift-0"
            inputValue="some text"
            isOpen={true}
            itemToString={[Function]}
            openMenu={[Function]}
            reset={[Function]}
            selectHighlightedItem={[Function]}
            selectItem={[Function]}
            selectItemAtIndex={[Function]}
            selectedItem={null}
            setHighlightedIndex={[Function]}
            setItemCount={[Function]}
            setState={[Function]}
            suggestions={
              Array [
                "some suggestion",
              ]
            }
            toggleMenu={[Function]}
            unsetItemCount={[Function]}
          >
            <PickerDropdown
              SuggestionComponent={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "inputValue": "some text",
                        "isHighlighted": false,
                        "item": "some suggestion",
                        "itemId": "some suggestion",
                      },
                      Object {},
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": <span>
                        Some Custom Suggestion
                      </span>,
                    },
                  ],
                }
              }
              anchorElement={
                <input
                  aria-autocomplete="list"
                  aria-controls="downshift-0-menu"
                  aria-invalid="false"
                  aria-labelledby="downshift-0-label"
                  autocomplete="off"
                  class="MuiInputBase-input MuiInput-input PickerInput-inputRoot"
                  id="downshift-0-input"
                  type="text"
                  value="some text"
                />
              }
              clearItems={[Function]}
              clearSelection={[Function]}
              closeMenu={[Function]}
              getItemProps={[Function]}
              getLabelProps={[Function]}
              getMenuProps={[Function]}
              getRootProps={[Function]}
              getToggleButtonProps={[Function]}
              highlightedIndex={null}
              id="downshift-0"
              inputValue="some text"
              isOpen={true}
              itemToString={[Function]}
              openMenu={[Function]}
              reset={[Function]}
              selectHighlightedItem={[Function]}
              selectItem={[Function]}
              selectItemAtIndex={[Function]}
              selectedItem={null}
              setHighlightedIndex={[Function]}
              setItemCount={[Function]}
              setState={[Function]}
              suggestions={
                Array [
                  "some suggestion",
                ]
              }
              toggleMenu={[Function]}
              unsetItemCount={[Function]}
            >
              <WithStyles(Paper)
                component="ul"
                role="menu"
                square={true}
                style={
                  Object {
                    "margin": 0,
                    "overflowY": "auto",
                    "padding": 0,
                    "position": "absolute",
                    "width": "100%",
                    "zIndex": 20,
                  }
                }
              >
                <Paper
                  classes={
                    Object {
                      "elevation0": "MuiPaper-elevation0",
                      "elevation1": "MuiPaper-elevation1",
                      "elevation10": "MuiPaper-elevation10",
                      "elevation11": "MuiPaper-elevation11",
                      "elevation12": "MuiPaper-elevation12",
                      "elevation13": "MuiPaper-elevation13",
                      "elevation14": "MuiPaper-elevation14",
                      "elevation15": "MuiPaper-elevation15",
                      "elevation16": "MuiPaper-elevation16",
                      "elevation17": "MuiPaper-elevation17",
                      "elevation18": "MuiPaper-elevation18",
                      "elevation19": "MuiPaper-elevation19",
                      "elevation2": "MuiPaper-elevation2",
                      "elevation20": "MuiPaper-elevation20",
                      "elevation21": "MuiPaper-elevation21",
                      "elevation22": "MuiPaper-elevation22",
                      "elevation23": "MuiPaper-elevation23",
                      "elevation24": "MuiPaper-elevation24",
                      "elevation3": "MuiPaper-elevation3",
                      "elevation4": "MuiPaper-elevation4",
                      "elevation5": "MuiPaper-elevation5",
                      "elevation6": "MuiPaper-elevation6",
                      "elevation7": "MuiPaper-elevation7",
                      "elevation8": "MuiPaper-elevation8",
                      "elevation9": "MuiPaper-elevation9",
                      "root": "MuiPaper-root",
                      "rounded": "MuiPaper-rounded",
                    }
                  }
                  component="ul"
                  elevation={2}
                  role="menu"
                  square={true}
                  style={
                    Object {
                      "margin": 0,
                      "overflowY": "auto",
                      "padding": 0,
                      "position": "absolute",
                      "width": "100%",
                      "zIndex": 20,
                    }
                  }
                >
                  <ul
                    className="MuiPaper-root MuiPaper-elevation2"
                    role="menu"
                    style={
                      Object {
                        "margin": 0,
                        "overflowY": "auto",
                        "padding": 0,
                        "position": "absolute",
                        "width": "100%",
                        "zIndex": 20,
                      }
                    }
                  >
                    <WithStyles(PickerSuggestions)
                      SuggestionComponent={
                        [MockFunction] {
                          "calls": Array [
                            Array [
                              Object {
                                "inputValue": "some text",
                                "isHighlighted": false,
                                "item": "some suggestion",
                                "itemId": "some suggestion",
                              },
                              Object {},
                            ],
                          ],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": <span>
                                Some Custom Suggestion
                              </span>,
                            },
                          ],
                        }
                      }
                      clearItems={[Function]}
                      clearSelection={[Function]}
                      closeMenu={[Function]}
                      getItemProps={[Function]}
                      getLabelProps={[Function]}
                      getMenuProps={[Function]}
                      getRootProps={[Function]}
                      getToggleButtonProps={[Function]}
                      highlightedIndex={null}
                      id="downshift-0"
                      inputValue="some text"
                      itemToString={[Function]}
                      openMenu={[Function]}
                      reset={[Function]}
                      selectHighlightedItem={[Function]}
                      selectItem={[Function]}
                      selectItemAtIndex={[Function]}
                      selectedItem={null}
                      setHighlightedIndex={[Function]}
                      setItemCount={[Function]}
                      setState={[Function]}
                      suggestions={
                        Array [
                          "some suggestion",
                        ]
                      }
                      toggleMenu={[Function]}
                      unsetItemCount={[Function]}
                    >
                      <PickerSuggestions
                        SuggestionComponent={
                          [MockFunction] {
                            "calls": Array [
                              Array [
                                Object {
                                  "inputValue": "some text",
                                  "isHighlighted": false,
                                  "item": "some suggestion",
                                  "itemId": "some suggestion",
                                },
                                Object {},
                              ],
                            ],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": <span>
                                  Some Custom Suggestion
                                </span>,
                              },
                            ],
                          }
                        }
                        classes={
                          Object {
                            "highlighted": "PickerSuggestions-highlighted",
                          }
                        }
                        clearItems={[Function]}
                        clearSelection={[Function]}
                        closeMenu={[Function]}
                        getItemProps={[Function]}
                        getLabelProps={[Function]}
                        getMenuProps={[Function]}
                        getRootProps={[Function]}
                        getToggleButtonProps={[Function]}
                        highlightedIndex={null}
                        id="downshift-0"
                        inputValue="some text"
                        itemToString={[Function]}
                        openMenu={[Function]}
                        reset={[Function]}
                        selectHighlightedItem={[Function]}
                        selectItem={[Function]}
                        selectItemAtIndex={[Function]}
                        selectedItem={null}
                        setHighlightedIndex={[Function]}
                        setItemCount={[Function]}
                        setState={[Function]}
                        suggestions={
                          Array [
                            "some suggestion",
                          ]
                        }
                        toggleMenu={[Function]}
                        unsetItemCount={[Function]}
                      >
                        <WithStyles(MenuItem)
                          aria-selected={false}
                          className=""
                          id="downshift-0-item-0"
                          key="some suggestion"
                          onClick={[Function]}
                          onMouseDown={[Function]}
                          onMouseMove={[Function]}
                          role="menuitem"
                          style={
                            Object {
                              "height": "auto",
                              "padding": 0,
                            }
                          }
                        >
                          <MenuItem
                            aria-selected={false}
                            className=""
                            classes={
                              Object {
                                "gutters": "MuiMenuItem-gutters",
                                "root": "MuiMenuItem-root",
                                "selected": "MuiMenuItem-selected",
                              }
                            }
                            component="li"
                            disableGutters={false}
                            id="downshift-0-item-0"
                            onClick={[Function]}
                            onMouseDown={[Function]}
                            onMouseMove={[Function]}
                            role="menuitem"
                            style={
                              Object {
                                "height": "auto",
                                "padding": 0,
                              }
                            }
                          >
                            <WithStyles(ListItem)
                              aria-selected={false}
                              button={true}
                              className="MuiMenuItem-root MuiMenuItem-gutters"
                              component="li"
                              disableGutters={false}
                              id="downshift-0-item-0"
                              onClick={[Function]}
                              onMouseDown={[Function]}
                              onMouseMove={[Function]}
                              role="menuitem"
                              style={
                                Object {
                                  "height": "auto",
                                  "padding": 0,
                                }
                              }
                              tabIndex={-1}
                            >
                              <ListItem
                                ContainerComponent="li"
                                alignItems="center"
                                aria-selected={false}
                                button={true}
                                className="MuiMenuItem-root MuiMenuItem-gutters"
                                classes={
                                  Object {
                                    "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
                                    "button": "MuiListItem-button",
                                    "container": "MuiListItem-container",
                                    "default": "MuiListItem-default",
                                    "dense": "MuiListItem-dense",
                                    "disabled": "MuiListItem-disabled",
                                    "divider": "MuiListItem-divider",
                                    "focusVisible": "MuiListItem-focusVisible",
                                    "gutters": "MuiListItem-gutters",
                                    "root": "MuiListItem-root",
                                    "secondaryAction": "MuiListItem-secondaryAction",
                                    "selected": "MuiListItem-selected",
                                  }
                                }
                                component="li"
                                dense={false}
                                disableGutters={false}
                                disabled={false}
                                divider={false}
                                id="downshift-0-item-0"
                                onClick={[Function]}
                                onMouseDown={[Function]}
                                onMouseMove={[Function]}
                                role="menuitem"
                                selected={false}
                                style={
                                  Object {
                                    "height": "auto",
                                    "padding": 0,
                                  }
                                }
                                tabIndex={-1}
                              >
                                <MergeListContext
                                  alignItems="center"
                                  dense={false}
                                >
                                  <WithStyles(ButtonBase)
                                    aria-selected={false}
                                    className="MuiListItem-root MuiListItem-default MuiListItem-gutters MuiListItem-button MuiMenuItem-root MuiMenuItem-gutters"
                                    component="li"
                                    disabled={false}
                                    focusVisibleClassName="MuiListItem-focusVisible"
                                    id="downshift-0-item-0"
                                    onClick={[Function]}
                                    onMouseDown={[Function]}
                                    onMouseMove={[Function]}
                                    role="menuitem"
                                    style={
                                      Object {
                                        "height": "auto",
                                        "padding": 0,
                                      }
                                    }
                                    tabIndex={-1}
                                  >
                                    <ButtonBase
                                      aria-selected={false}
                                      centerRipple={false}
                                      className="MuiListItem-root MuiListItem-default MuiListItem-gutters MuiListItem-button MuiMenuItem-root MuiMenuItem-gutters"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled",
                                          "focusVisible": "MuiButtonBase-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      component="li"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={false}
                                      focusVisibleClassName="MuiListItem-focusVisible"
                                      id="downshift-0-item-0"
                                      onClick={[Function]}
                                      onMouseDown={[Function]}
                                      onMouseMove={[Function]}
                                      role="menuitem"
                                      style={
                                        Object {
                                          "height": "auto",
                                          "padding": 0,
                                        }
                                      }
                                      tabIndex={-1}
                                      type="button"
                                    >
                                      <li
                                        aria-selected={false}
                                        className="MuiButtonBase-root MuiListItem-root MuiListItem-default MuiListItem-gutters MuiListItem-button MuiMenuItem-root MuiMenuItem-gutters"
                                        id="downshift-0-item-0"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseMove={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        role="menuitem"
                                        style={
                                          Object {
                                            "height": "auto",
                                            "padding": 0,
                                          }
                                        }
                                        tabIndex={-1}
                                      >
                                        <mockConstructor
                                          inputValue="some text"
                                          isHighlighted={false}
                                          item="some suggestion"
                                          itemId="some suggestion"
                                          key=".0"
                                        >
                                          <span>
                                            Some Custom Suggestion
                                          </span>
                                        </mockConstructor>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={false}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={false}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child",
                                                  "childLeaving": "MuiTouchRipple-childLeaving",
                                                  "childPulsate": "MuiTouchRipple-childPulsate",
                                                  "ripple": "MuiTouchRipple-ripple",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                  "root": "MuiTouchRipple-root",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </li>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </MergeListContext>
                              </ListItem>
                            </WithStyles(ListItem)>
                          </MenuItem>
                        </WithStyles(MenuItem)>
                      </PickerSuggestions>
                    </WithStyles(PickerSuggestions)>
                  </ul>
                </Paper>
              </WithStyles(Paper)>
            </PickerDropdown>
          </DebouncedContainer>
        </div>
      </Downshift>
    </MultiPicker>
  </WithStyles(MultiPicker)>
</JssProvider>
`;

exports[`MultiPicker component shows an custom error message if the user provides the ErrorComponent prop 1`] = `
<JssProvider
  generateClassName={[Function]}
>
  <WithStyles(MultiPicker)
    ErrorComponent={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "error": [Error: fail],
              "inputValue": "some text",
            },
            Object {},
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": <span>
              Oh dear
            </span>,
          },
        ],
      }
    }
    getSuggestedItems={[Function]}
    itemToString={[Function]}
    onChange={[Function]}
    value={Array []}
  >
    <MultiPicker
      ErrorComponent={
        [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "error": [Error: fail],
                "inputValue": "some text",
              },
              Object {},
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": <span>
                Oh dear
              </span>,
            },
          ],
        }
      }
      classes={
        Object {
          "pickerChip": "MultiPicker-pickerChip",
        }
      }
      getSuggestedItems={[Function]}
      itemToString={[Function]}
      onChange={[Function]}
      value={Array []}
    >
      <Downshift
        defaultHighlightedIndex={null}
        defaultIsOpen={false}
        environment={[Window]}
        fullWidth={true}
        getA11yStatusMessage={[Function]}
        inputValue="some text"
        itemToString={[Function]}
        onChange={[Function]}
        onInputValueChange={[Function]}
        onOuterClick={[Function]}
        onSelect={[Function]}
        onStateChange={[Function]}
        onUserAction={[Function]}
        scrollIntoView={[Function]}
        selectedItemChanged={[Function]}
        stateReducer={[Function]}
        suppressRefError={false}
      >
        <div
          aria-expanded={true}
          aria-haspopup="listbox"
          aria-labelledby="downshift-0-label"
          aria-owns="downshift-0-menu"
          role="combobox"
          style={
            Object {
              "position": "relative",
            }
          }
        >
          <WithStyles(PickerInput)
            aria-activedescendant={null}
            aria-autocomplete="list"
            aria-controls="downshift-0-menu"
            aria-labelledby="downshift-0-label"
            autoComplete="off"
            id="downshift-0-input"
            inputRef={
              Object {
                "current": <input
                  aria-autocomplete="list"
                  aria-controls="downshift-0-menu"
                  aria-invalid="false"
                  aria-labelledby="downshift-0-label"
                  autocomplete="off"
                  class="MuiInputBase-input MuiInput-input PickerInput-inputRoot"
                  id="downshift-0-input"
                  type="text"
                  value="some text"
                />,
              }
            }
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            startAdornment={false}
            value="some text"
          >
            <PickerInput
              aria-activedescendant={null}
              aria-autocomplete="list"
              aria-controls="downshift-0-menu"
              aria-labelledby="downshift-0-label"
              autoComplete="off"
              classes={
                Object {
                  "InputLabelFilled": "PickerInput-InputLabelFilled",
                  "InputLabelRoot": "PickerInput-InputLabelRoot",
                  "InputLabelShrink": "PickerInput-InputLabelShrink",
                  "InputRoot": "PickerInput-InputRoot",
                  "inputRoot": "PickerInput-inputRoot",
                }
              }
              fullWidth={false}
              id="downshift-0-input"
              inputRef={
                Object {
                  "current": <input
                    aria-autocomplete="list"
                    aria-controls="downshift-0-menu"
                    aria-invalid="false"
                    aria-labelledby="downshift-0-label"
                    autocomplete="off"
                    class="MuiInputBase-input MuiInput-input PickerInput-inputRoot"
                    id="downshift-0-input"
                    type="text"
                    value="some text"
                  />,
                }
              }
              label=""
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              startAdornment={false}
              value="some text"
            >
              <TextField
                InputLabelProps={
                  Object {
                    "classes": Object {
                      "filled": "PickerInput-InputLabelFilled",
                      "root": "PickerInput-InputLabelRoot",
                      "shrink": "PickerInput-InputLabelShrink",
                    },
                    "shrink": true,
                  }
                }
                InputProps={
                  Object {
                    "classes": Object {
                      "root": "PickerInput-InputRoot",
                    },
                    "inputProps": Object {
                      "aria-activedescendant": null,
                      "aria-autocomplete": "list",
                      "aria-controls": "downshift-0-menu",
                      "aria-labelledby": "downshift-0-label",
                      "autoComplete": "off",
                      "className": "PickerInput-inputRoot",
                      "id": "downshift-0-input",
                      "onDragStart": undefined,
                      "style": undefined,
                    },
                    "inputRef": Object {
                      "current": <input
                        aria-autocomplete="list"
                        aria-controls="downshift-0-menu"
                        aria-invalid="false"
                        aria-labelledby="downshift-0-label"
                        autocomplete="off"
                        class="MuiInputBase-input MuiInput-input PickerInput-inputRoot"
                        id="downshift-0-input"
                        type="text"
                        value="some text"
                      />,
                    },
                    "startAdornment": false,
                    "style": undefined,
                  }
                }
                fullWidth={false}
                label=""
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                required={false}
                select={false}
                value="some text"
                variant="standard"
              >
                <WithStyles(FormControl)
                  fullWidth={false}
                  onKeyDown={[Function]}
                  required={false}
                  variant="standard"
                >
                  <FormControl
                    classes={
                      Object {
                        "fullWidth": "MuiFormControl-fullWidth",
                        "marginDense": "MuiFormControl-marginDense",
                        "marginNormal": "MuiFormControl-marginNormal",
                        "root": "MuiFormControl-root",
                      }
                    }
                    component="div"
                    disabled={false}
                    error={false}
                    fullWidth={false}
                    margin="none"
                    onKeyDown={[Function]}
                    required={false}
                    variant="standard"
                  >
                    <div
                      className="MuiFormControl-root"
                      onKeyDown={[Function]}
                    >
                      <WithStyles(Input)
                        classes={
                          Object {
                            "root": "PickerInput-InputRoot",
                          }
                        }
                        fullWidth={false}
                        inputProps={
                          Object {
                            "aria-activedescendant": null,
                            "aria-autocomplete": "list",
                            "aria-controls": "downshift-0-menu",
                            "aria-labelledby": "downshift-0-label",
                            "autoComplete": "off",
                            "className": "PickerInput-inputRoot",
                            "id": "downshift-0-input",
                            "onDragStart": undefined,
                            "style": undefined,
                          }
                        }
                        inputRef={
                          Object {
                            "current": <input
                              aria-autocomplete="list"
                              aria-controls="downshift-0-menu"
                              aria-invalid="false"
                              aria-labelledby="downshift-0-label"
                              autocomplete="off"
                              class="MuiInputBase-input MuiInput-input PickerInput-inputRoot"
                              id="downshift-0-input"
                              type="text"
                              value="some text"
                            />,
                          }
                        }
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        startAdornment={false}
                        value="some text"
                      >
                        <Input
                          classes={
                            Object {
                              "disabled": "MuiInput-disabled",
                              "error": "MuiInput-error",
                              "focused": "MuiInput-focused",
                              "formControl": "MuiInput-formControl",
                              "fullWidth": "MuiInput-fullWidth",
                              "input": "MuiInput-input",
                              "inputMarginDense": "MuiInput-inputMarginDense",
                              "inputMultiline": "MuiInput-inputMultiline",
                              "inputType": "MuiInput-inputType",
                              "inputTypeSearch": "MuiInput-inputTypeSearch",
                              "multiline": "MuiInput-multiline",
                              "root": "MuiInput-root PickerInput-InputRoot",
                              "underline": "MuiInput-underline",
                            }
                          }
                          fullWidth={false}
                          inputProps={
                            Object {
                              "aria-activedescendant": null,
                              "aria-autocomplete": "list",
                              "aria-controls": "downshift-0-menu",
                              "aria-labelledby": "downshift-0-label",
                              "autoComplete": "off",
                              "className": "PickerInput-inputRoot",
                              "id": "downshift-0-input",
                              "onDragStart": undefined,
                              "style": undefined,
                            }
                          }
                          inputRef={
                            Object {
                              "current": <input
                                aria-autocomplete="list"
                                aria-controls="downshift-0-menu"
                                aria-invalid="false"
                                aria-labelledby="downshift-0-label"
                                autocomplete="off"
                                class="MuiInputBase-input MuiInput-input PickerInput-inputRoot"
                                id="downshift-0-input"
                                type="text"
                                value="some text"
                              />,
                            }
                          }
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          startAdornment={false}
                          value="some text"
                        >
                          <WithStyles(WithFormControlContext(InputBase))
                            classes={
                              Object {
                                "disabled": "MuiInput-disabled",
                                "error": "MuiInput-error",
                                "focused": "MuiInput-focused",
                                "formControl": "MuiInput-formControl",
                                "fullWidth": "MuiInput-fullWidth",
                                "input": "MuiInput-input",
                                "inputMarginDense": "MuiInput-inputMarginDense",
                                "inputMultiline": "MuiInput-inputMultiline",
                                "inputType": "MuiInput-inputType",
                                "inputTypeSearch": "MuiInput-inputTypeSearch",
                                "multiline": "MuiInput-multiline",
                                "root": "MuiInput-root PickerInput-InputRoot MuiInput-underline",
                                "underline": null,
                              }
                            }
                            fullWidth={false}
                            inputComponent="input"
                            inputProps={
                              Object {
                                "aria-activedescendant": null,
                                "aria-autocomplete": "list",
                                "aria-controls": "downshift-0-menu",
                                "aria-labelledby": "downshift-0-label",
                                "autoComplete": "off",
                                "className": "PickerInput-inputRoot",
                                "id": "downshift-0-input",
                                "onDragStart": undefined,
                                "style": undefined,
                              }
                            }
                            inputRef={
                              Object {
                                "current": <input
                                  aria-autocomplete="list"
                                  aria-controls="downshift-0-menu"
                                  aria-invalid="false"
                                  aria-labelledby="downshift-0-label"
                                  autocomplete="off"
                                  class="MuiInputBase-input MuiInput-input PickerInput-inputRoot"
                                  id="downshift-0-input"
                                  type="text"
                                  value="some text"
                                />,
                              }
                            }
                            multiline={false}
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            startAdornment={false}
                            type="text"
                            value="some text"
                          >
                            <WithFormControlContext(InputBase)
                              classes={
                                Object {
                                  "adornedEnd": "MuiInputBase-adornedEnd",
                                  "adornedStart": "MuiInputBase-adornedStart",
                                  "disabled": "MuiInputBase-disabled MuiInput-disabled",
                                  "error": "MuiInputBase-error MuiInput-error",
                                  "focused": "MuiInputBase-focused MuiInput-focused",
                                  "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                  "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                  "input": "MuiInputBase-input MuiInput-input",
                                  "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                  "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                  "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                  "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                  "inputType": "MuiInputBase-inputType MuiInput-inputType",
                                  "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                  "marginDense": "MuiInputBase-marginDense",
                                  "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                  "root": "MuiInputBase-root MuiInput-root PickerInput-InputRoot MuiInput-underline",
                                }
                              }
                              fullWidth={false}
                              inputComponent="input"
                              inputProps={
                                Object {
                                  "aria-activedescendant": null,
                                  "aria-autocomplete": "list",
                                  "aria-controls": "downshift-0-menu",
                                  "aria-labelledby": "downshift-0-label",
                                  "autoComplete": "off",
                                  "className": "PickerInput-inputRoot",
                                  "id": "downshift-0-input",
                                  "onDragStart": undefined,
                                  "style": undefined,
                                }
                              }
                              inputRef={
                                Object {
                                  "current": <input
                                    aria-autocomplete="list"
                                    aria-controls="downshift-0-menu"
                                    aria-invalid="false"
                                    aria-labelledby="downshift-0-label"
                                    autocomplete="off"
                                    class="MuiInputBase-input MuiInput-input PickerInput-inputRoot"
                                    id="downshift-0-input"
                                    type="text"
                                    value="some text"
                                  />,
                                }
                              }
                              multiline={false}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              startAdornment={false}
                              type="text"
                              value="some text"
                            >
                              <InputBase
                                classes={
                                  Object {
                                    "adornedEnd": "MuiInputBase-adornedEnd",
                                    "adornedStart": "MuiInputBase-adornedStart",
                                    "disabled": "MuiInputBase-disabled MuiInput-disabled",
                                    "error": "MuiInputBase-error MuiInput-error",
                                    "focused": "MuiInputBase-focused MuiInput-focused",
                                    "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                    "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                    "input": "MuiInputBase-input MuiInput-input",
                                    "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                    "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                    "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                    "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                    "inputType": "MuiInputBase-inputType MuiInput-inputType",
                                    "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                    "marginDense": "MuiInputBase-marginDense",
                                    "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                    "root": "MuiInputBase-root MuiInput-root PickerInput-InputRoot MuiInput-underline",
                                  }
                                }
                                fullWidth={false}
                                inputComponent="input"
                                inputProps={
                                  Object {
                                    "aria-activedescendant": null,
                                    "aria-autocomplete": "list",
                                    "aria-controls": "downshift-0-menu",
                                    "aria-labelledby": "downshift-0-label",
                                    "autoComplete": "off",
                                    "className": "PickerInput-inputRoot",
                                    "id": "downshift-0-input",
                                    "onDragStart": undefined,
                                    "style": undefined,
                                  }
                                }
                                inputRef={
                                  Object {
                                    "current": <input
                                      aria-autocomplete="list"
                                      aria-controls="downshift-0-menu"
                                      aria-invalid="false"
                                      aria-labelledby="downshift-0-label"
                                      autocomplete="off"
                                      class="MuiInputBase-input MuiInput-input PickerInput-inputRoot"
                                      id="downshift-0-input"
                                      type="text"
                                      value="some text"
                                    />,
                                  }
                                }
                                muiFormControl={
                                  Object {
                                    "adornedStart": false,
                                    "disabled": false,
                                    "error": false,
                                    "filled": true,
                                    "focused": false,
                                    "margin": "none",
                                    "onBlur": [Function],
                                    "onEmpty": [Function],
                                    "onFilled": [Function],
                                    "onFocus": [Function],
                                    "required": false,
                                    "variant": "standard",
                                  }
                                }
                                multiline={false}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                startAdornment={false}
                                type="text"
                                value="some text"
                              >
                                <div
                                  className="MuiInputBase-root MuiInput-root PickerInput-InputRoot MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
                                  onClick={[Function]}
                                >
                                  <input
                                    aria-activedescendant={null}
                                    aria-autocomplete="list"
                                    aria-controls="downshift-0-menu"
                                    aria-invalid={false}
                                    aria-labelledby="downshift-0-label"
                                    autoComplete="off"
                                    className="MuiInputBase-input MuiInput-input PickerInput-inputRoot"
                                    disabled={false}
                                    id="downshift-0-input"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    required={false}
                                    type="text"
                                    value="some text"
                                  />
                                </div>
                              </InputBase>
                            </WithFormControlContext(InputBase)>
                          </WithStyles(WithFormControlContext(InputBase))>
                        </Input>
                      </WithStyles(Input)>
                    </div>
                  </FormControl>
                </WithStyles(FormControl)>
              </TextField>
            </PickerInput>
          </WithStyles(PickerInput)>
          <DebouncedContainer
            ErrorComponent={
              [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "error": [Error: fail],
                      "inputValue": "some text",
                    },
                    Object {},
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": <span>
                      Oh dear
                    </span>,
                  },
                ],
              }
            }
            anchorElement={
              <input
                aria-autocomplete="list"
                aria-controls="downshift-0-menu"
                aria-invalid="false"
                aria-labelledby="downshift-0-label"
                autocomplete="off"
                class="MuiInputBase-input MuiInput-input PickerInput-inputRoot"
                id="downshift-0-input"
                type="text"
                value="some text"
              />
            }
            clearItems={[Function]}
            clearSelection={[Function]}
            closeMenu={[Function]}
            getItemProps={[Function]}
            getLabelProps={[Function]}
            getMenuProps={[Function]}
            getRootProps={[Function]}
            getToggleButtonProps={[Function]}
            highlightedIndex={null}
            id="downshift-0"
            inputValue="some text"
            isOpen={true}
            itemToString={[Function]}
            openMenu={[Function]}
            reset={[Function]}
            selectHighlightedItem={[Function]}
            selectItem={[Function]}
            selectItemAtIndex={[Function]}
            selectedItem={null}
            setHighlightedIndex={[Function]}
            setItemCount={[Function]}
            setState={[Function]}
            suggestions={[Error: fail]}
            toggleMenu={[Function]}
            unsetItemCount={[Function]}
          >
            <PickerDropdown
              ErrorComponent={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      Object {
                        "error": [Error: fail],
                        "inputValue": "some text",
                      },
                      Object {},
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": <span>
                        Oh dear
                      </span>,
                    },
                  ],
                }
              }
              anchorElement={
                <input
                  aria-autocomplete="list"
                  aria-controls="downshift-0-menu"
                  aria-invalid="false"
                  aria-labelledby="downshift-0-label"
                  autocomplete="off"
                  class="MuiInputBase-input MuiInput-input PickerInput-inputRoot"
                  id="downshift-0-input"
                  type="text"
                  value="some text"
                />
              }
              clearItems={[Function]}
              clearSelection={[Function]}
              closeMenu={[Function]}
              getItemProps={[Function]}
              getLabelProps={[Function]}
              getMenuProps={[Function]}
              getRootProps={[Function]}
              getToggleButtonProps={[Function]}
              highlightedIndex={null}
              id="downshift-0"
              inputValue="some text"
              isOpen={true}
              itemToString={[Function]}
              openMenu={[Function]}
              reset={[Function]}
              selectHighlightedItem={[Function]}
              selectItem={[Function]}
              selectItemAtIndex={[Function]}
              selectedItem={null}
              setHighlightedIndex={[Function]}
              setItemCount={[Function]}
              setState={[Function]}
              suggestions={[Error: fail]}
              toggleMenu={[Function]}
              unsetItemCount={[Function]}
            >
              <WithStyles(Paper)
                component="ul"
                role="menu"
                square={true}
                style={
                  Object {
                    "margin": 0,
                    "overflowY": "auto",
                    "padding": 0,
                    "position": "absolute",
                    "width": "100%",
                    "zIndex": 20,
                  }
                }
              >
                <Paper
                  classes={
                    Object {
                      "elevation0": "MuiPaper-elevation0",
                      "elevation1": "MuiPaper-elevation1",
                      "elevation10": "MuiPaper-elevation10",
                      "elevation11": "MuiPaper-elevation11",
                      "elevation12": "MuiPaper-elevation12",
                      "elevation13": "MuiPaper-elevation13",
                      "elevation14": "MuiPaper-elevation14",
                      "elevation15": "MuiPaper-elevation15",
                      "elevation16": "MuiPaper-elevation16",
                      "elevation17": "MuiPaper-elevation17",
                      "elevation18": "MuiPaper-elevation18",
                      "elevation19": "MuiPaper-elevation19",
                      "elevation2": "MuiPaper-elevation2",
                      "elevation20": "MuiPaper-elevation20",
                      "elevation21": "MuiPaper-elevation21",
                      "elevation22": "MuiPaper-elevation22",
                      "elevation23": "MuiPaper-elevation23",
                      "elevation24": "MuiPaper-elevation24",
                      "elevation3": "MuiPaper-elevation3",
                      "elevation4": "MuiPaper-elevation4",
                      "elevation5": "MuiPaper-elevation5",
                      "elevation6": "MuiPaper-elevation6",
                      "elevation7": "MuiPaper-elevation7",
                      "elevation8": "MuiPaper-elevation8",
                      "elevation9": "MuiPaper-elevation9",
                      "root": "MuiPaper-root",
                      "rounded": "MuiPaper-rounded",
                    }
                  }
                  component="ul"
                  elevation={2}
                  role="menu"
                  square={true}
                  style={
                    Object {
                      "margin": 0,
                      "overflowY": "auto",
                      "padding": 0,
                      "position": "absolute",
                      "width": "100%",
                      "zIndex": 20,
                    }
                  }
                >
                  <ul
                    className="MuiPaper-root MuiPaper-elevation2"
                    role="menu"
                    style={
                      Object {
                        "margin": 0,
                        "overflowY": "auto",
                        "padding": 0,
                        "position": "absolute",
                        "width": "100%",
                        "zIndex": 20,
                      }
                    }
                  >
                    <WithStyles(PickerSuggestions)
                      ErrorComponent={
                        [MockFunction] {
                          "calls": Array [
                            Array [
                              Object {
                                "error": [Error: fail],
                                "inputValue": "some text",
                              },
                              Object {},
                            ],
                          ],
                          "results": Array [
                            Object {
                              "type": "return",
                              "value": <span>
                                Oh dear
                              </span>,
                            },
                          ],
                        }
                      }
                      clearItems={[Function]}
                      clearSelection={[Function]}
                      closeMenu={[Function]}
                      getItemProps={[Function]}
                      getLabelProps={[Function]}
                      getMenuProps={[Function]}
                      getRootProps={[Function]}
                      getToggleButtonProps={[Function]}
                      highlightedIndex={null}
                      id="downshift-0"
                      inputValue="some text"
                      itemToString={[Function]}
                      openMenu={[Function]}
                      reset={[Function]}
                      selectHighlightedItem={[Function]}
                      selectItem={[Function]}
                      selectItemAtIndex={[Function]}
                      selectedItem={null}
                      setHighlightedIndex={[Function]}
                      setItemCount={[Function]}
                      setState={[Function]}
                      suggestions={[Error: fail]}
                      toggleMenu={[Function]}
                      unsetItemCount={[Function]}
                    >
                      <PickerSuggestions
                        ErrorComponent={
                          [MockFunction] {
                            "calls": Array [
                              Array [
                                Object {
                                  "error": [Error: fail],
                                  "inputValue": "some text",
                                },
                                Object {},
                              ],
                            ],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": <span>
                                  Oh dear
                                </span>,
                              },
                            ],
                          }
                        }
                        classes={
                          Object {
                            "highlighted": "PickerSuggestions-highlighted",
                          }
                        }
                        clearItems={[Function]}
                        clearSelection={[Function]}
                        closeMenu={[Function]}
                        getItemProps={[Function]}
                        getLabelProps={[Function]}
                        getMenuProps={[Function]}
                        getRootProps={[Function]}
                        getToggleButtonProps={[Function]}
                        highlightedIndex={null}
                        id="downshift-0"
                        inputValue="some text"
                        itemToString={[Function]}
                        openMenu={[Function]}
                        reset={[Function]}
                        selectHighlightedItem={[Function]}
                        selectItem={[Function]}
                        selectItemAtIndex={[Function]}
                        selectedItem={null}
                        setHighlightedIndex={[Function]}
                        setItemCount={[Function]}
                        setState={[Function]}
                        suggestions={[Error: fail]}
                        toggleMenu={[Function]}
                        unsetItemCount={[Function]}
                      >
                        <mockConstructor
                          error={[Error: fail]}
                          inputValue="some text"
                        >
                          <span>
                            Oh dear
                          </span>
                        </mockConstructor>
                      </PickerSuggestions>
                    </WithStyles(PickerSuggestions)>
                  </ul>
                </Paper>
              </WithStyles(Paper)>
            </PickerDropdown>
          </DebouncedContainer>
        </div>
      </Downshift>
    </MultiPicker>
  </WithStyles(MultiPicker)>
</JssProvider>
`;
